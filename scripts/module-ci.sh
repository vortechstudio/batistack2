#!/bin/bash

# üèóÔ∏è Module CI/CD - Script Local
# Reproduit le workflow GitHub Actions module-ci.yml localement

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
REPORTS_DIR="$PROJECT_ROOT/reports/module-ci"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_step() {
    echo -e "${PURPLE}üîÑ $1${NC}"
}

# Fonction d'aide
show_help() {
    cat << EOF
üèóÔ∏è Module CI/CD - Script Local

USAGE:
    $0 [OPTIONS] [MODULES...]

OPTIONS:
    -h, --help              Afficher cette aide
    -a, --all               Ex√©cuter tous les modules
    -t, --tests-only        Ex√©cuter uniquement les tests
    -s, --security-only     Ex√©cuter uniquement l'analyse de s√©curit√©
    -p, --performance-only  Ex√©cuter uniquement les tests de performance
    -q, --quality-only      Ex√©cuter uniquement l'analyse de qualit√©
    -d, --detect-only       D√©tecter uniquement les modules modifi√©s
    --skip-deps            Ignorer l'installation des d√©pendances
    --php-version VERSION   Version PHP √† utiliser (d√©faut: 8.3)

MODULES:
    chantiers, rh, tiers, commerce, core, produit

EXEMPLES:
    $0 --all                    # Tous les modules et toutes les v√©rifications
    $0 chantiers rh             # Modules sp√©cifiques
    $0 --detect-only            # D√©tecter les modules modifi√©s
    $0 --tests-only chantiers   # Tests uniquement pour le module chantiers
    $0 --quality-only           # Analyse de qualit√© uniquement

EOF
}

# Variables par d√©faut
MODULES=()
RUN_ALL=false
TESTS_ONLY=false
SECURITY_ONLY=false
PERFORMANCE_ONLY=false
QUALITY_ONLY=false
DETECT_ONLY=false
SKIP_DEPS=false
PHP_VERSION="8.3"

# Analyse des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -a|--all)
            RUN_ALL=true
            shift
            ;;
        -t|--tests-only)
            TESTS_ONLY=true
            shift
            ;;
        -s|--security-only)
            SECURITY_ONLY=true
            shift
            ;;
        -p|--performance-only)
            PERFORMANCE_ONLY=true
            shift
            ;;
        -q|--quality-only)
            QUALITY_ONLY=true
            shift
            ;;
        -d|--detect-only)
            DETECT_ONLY=true
            shift
            ;;
        --skip-deps)
            SKIP_DEPS=true
            shift
            ;;
        --php-version)
            PHP_VERSION="$2"
            shift 2
            ;;
        chantiers|rh|tiers|commerce|core|produit)
            MODULES+=("$1")
            shift
            ;;
        *)
            log_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# V√©rifications pr√©liminaires
check_requirements() {
    log_step "V√©rification des pr√©requis..."

    # V√©rifier PHP
    if ! command -v php &> /dev/null; then
        log_error "PHP n'est pas install√©"
        exit 1
    fi

    local current_php_version=$(php -r "echo PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION;")
    log_info "Version PHP d√©tect√©e: $current_php_version"

    # V√©rifier Composer
    if ! command -v composer &> /dev/null; then
        log_error "Composer n'est pas install√©"
        exit 1
    fi

    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [[ ! -f "$PROJECT_ROOT/composer.json" ]]; then
        log_error "Fichier composer.json non trouv√©. √ätes-vous dans le bon r√©pertoire ?"
        exit 1
    fi

    # Cr√©er le r√©pertoire de rapports
    mkdir -p "$REPORTS_DIR"

    log_success "Pr√©requis v√©rifi√©s"
}

# D√©tection des modules modifi√©s
detect_changed_modules() {
    log_step "üîç D√©tection des modules modifi√©s..."

    local detected_modules=()

    # V√©rifier s'il y a des changements Git
    if git rev-parse --git-dir > /dev/null 2>&1; then
        log_info "D√©tection bas√©e sur Git..."

        # Obtenir les fichiers modifi√©s (non commit√©es + derniers commits)
        local changed_files
        changed_files=$(git diff --name-only HEAD~1 2>/dev/null || git ls-files --modified --others --exclude-standard)

        if [[ -n "$changed_files" ]]; then
            # Chantiers
            if echo "$changed_files" | grep -E "(app/Models/Chantiers/|app/Livewire/Chantier|app/Livewire/Chantiers/|database/migrations/.*chantier|tests/.*Chantier)" > /dev/null; then
                detected_modules+=("chantiers")
                log_success "Module Chantiers d√©tect√©"
            fi

            # RH
            if echo "$changed_files" | grep -E "(app/Models/RH/|app/Livewire/Humans/|database/migrations/.*employe|database/migrations/.*rh|tests/.*RH|tests/.*Employe)" > /dev/null; then
                detected_modules+=("rh")
                log_success "Module RH d√©tect√©"
            fi

            # Tiers
            if echo "$changed_files" | grep -E "(app/Models/Tiers/|app/Livewire/Tiers/|database/migrations/.*tiers|tests/.*Tiers)" > /dev/null; then
                detected_modules+=("tiers")
                log_success "Module Tiers d√©tect√©"
            fi

            # Commerce
            if echo "$changed_files" | grep -E "(app/Models/Commerce/|database/migrations/.*devis|database/migrations/.*facture|database/migrations/.*commande|tests/.*Commerce)" > /dev/null; then
                detected_modules+=("commerce")
                log_success "Module Commerce d√©tect√©"
            fi

            # Core
            if echo "$changed_files" | grep -E "(app/Models/Core/|app/Livewire/Core/|database/migrations/.*core|tests/.*Core)" > /dev/null; then
                detected_modules+=("core")
                log_success "Module Core d√©tect√©"
            fi

            if echo "$changed_files" | grep -E "(app/Models/Produit/|app/Livewire/Produit/|database/migrations/.*produit|tests/.*Produit)" > /dev/null; then
                detected_modules+=("produit")
                log_success "Module Produit d√©tect√©"
            fi
        else
            log_info "Aucun changement d√©tect√©"
        fi
    else
        log_warning "Pas de d√©p√¥t Git d√©tect√©, v√©rification de tous les modules"
        detected_modules=("chantiers" "rh" "tiers" "commerce" "core")
    fi

    if [[ ${#detected_modules[@]} -eq 0 ]]; then
        log_info "Aucun module d√©tect√©"
        return 1
    fi

    log_info "Modules d√©tect√©s: ${detected_modules[*]}"

    # Sauvegarder la liste des modules d√©tect√©s
    printf '%s\n' "${detected_modules[@]}" > "$REPORTS_DIR/detected-modules.txt"

    # Si DETECT_ONLY est activ√©, on s'arr√™te ici
    if [[ "$DETECT_ONLY" == true ]]; then
        log_success "D√©tection termin√©e"
        exit 0
    fi

    # Utiliser les modules d√©tect√©s si aucun module sp√©cifique n'a √©t√© fourni
    if [[ ${#MODULES[@]} -eq 0 ]]; then
        MODULES=("${detected_modules[@]}")
    fi

    return 0
}

# Installation des d√©pendances
install_dependencies() {
    if [[ "$SKIP_DEPS" == true ]]; then
        log_info "Installation des d√©pendances ignor√©e"
        return 0
    fi

    log_step "üì¶ Installation des d√©pendances..."
}

# Configuration de l'environnement de test
setup_test_environment() {
    log_step "üîß Configuration de l'environnement de test..."

    # Copier le fichier .env si n√©cessaire
    if [[ ! -f "$PROJECT_ROOT/.env" ]]; then
        if [[ -f "$PROJECT_ROOT/.env.github" ]]; then
            cp "$PROJECT_ROOT/.env.github" "$PROJECT_ROOT/.env"
            log_info "Fichier .env.github copi√© vers .env"
        elif [[ -f "$PROJECT_ROOT/.env.example" ]]; then
            cp "$PROJECT_ROOT/.env.example" "$PROJECT_ROOT/.env"
            log_info "Fichier .env.example copi√© vers .env"
        else
            log_warning "Aucun fichier .env de r√©f√©rence trouv√©"
        fi
    fi

    # G√©n√©rer la cl√© d'application
    if ! grep -q "APP_KEY=" "$PROJECT_ROOT/.env" || grep -q "APP_KEY=$" "$PROJECT_ROOT/.env"; then
        log_info "G√©n√©ration de la cl√© d'application..."
        php artisan key:generate --quiet
        log_success "Cl√© d'application g√©n√©r√©e"
    fi

    log_success "Environnement de test configur√©"
}

# Tests sp√©cifiques par module
run_module_tests() {
    local module="$1"
    log_step "üß™ Tests du module: $module"

    local test_results="$REPORTS_DIR/tests-$module-$TIMESTAMP.txt"
    local test_passed=true

    {
        echo "=== Tests du module $module ==="
        echo "Date: $(date)"
        echo "PHP Version: $(php -v | head -n1)"
        echo ""
    } > "$test_results"

    # Tests unitaires du module
    if [[ -d "$PROJECT_ROOT/tests/Unit" ]]; then
        log_info "Ex√©cution des tests unitaires pour $module..."
        if php artisan test "tests/Unit" --filter="$module" --coverage-text >> "$test_results" 2>&1; then
            log_success "Tests unitaires r√©ussis pour $module"
        else
            log_warning "√âchec ou absence de tests unitaires pour $module"
            test_passed=false
        fi
    fi

    # Tests fonctionnels du module
    if [[ -d "$PROJECT_ROOT/tests/Feature" ]]; then
        log_info "Ex√©cution des tests fonctionnels pour $module..."
        if php artisan test "tests/Feature" --filter="$module" --coverage-text >> "$test_results" 2>&1; then
            log_success "Tests fonctionnels r√©ussis pour $module"
        else
            log_warning "√âchec ou absence de tests fonctionnels pour $module"
            test_passed=false
        fi
    fi

    # Tests g√©n√©riques si pas de tests sp√©cifiques
    log_info "Recherche de tests g√©n√©riques pour $module..."
    if php artisan test --filter="$module" --coverage-text >> "$test_results" 2>&1; then
        log_success "Tests g√©n√©riques r√©ussis pour $module"
    else
        log_warning "Aucun test sp√©cifique trouv√© pour $module"
        echo "‚ö†Ô∏è Aucun test sp√©cifique trouv√© pour $module" >> "$test_results"
    fi

    # V√©rification de la documentation du module
    local module_doc="$PROJECT_ROOT/resources/docs/1.0/$module.md"
    if [[ ! -f "$module_doc" ]]; then
        log_warning "Documentation manquante pour le module $module"
        echo "üìù Cr√©ez le fichier: $module_doc" >> "$test_results"
    else
        log_success "Documentation trouv√©e pour $module"
    fi

    if [[ "$test_passed" == true ]]; then
        log_success "Tous les tests r√©ussis pour le module $module"
        return 0
    else
        log_error "√âchec de certains tests pour le module $module"
        return 1
    fi
}

# Analyse de s√©curit√©
run_security_scan() {
    log_step "üîí Analyse de s√©curit√©..."

    local security_report="$REPORTS_DIR/security-$TIMESTAMP.txt"
    local security_passed=true

    {
        echo "=== Rapport de S√©curit√© ==="
        echo "Date: $(date)"
        echo ""
    } > "$security_report"

    # Audit des d√©pendances Composer
    log_info "Audit des d√©pendances Composer..."
    if composer audit >> "$security_report" 2>&1; then
        log_success "Aucune vuln√©rabilit√© d√©tect√©e dans les d√©pendances"
    else
        log_warning "Vuln√©rabilit√©s d√©tect√©es dans les d√©pendances"
        security_passed=false
    fi

    # V√©rification des fichiers sensibles
    log_info "V√©rification des fichiers sensibles..."
    echo "" >> "$security_report"
    echo "=== V√©rification des mots-cl√©s sensibles ===" >> "$security_report"

    if grep -r "password\|secret\|key" app/ --include="*.php" | grep -v "// " | grep -v "/*" | head -5 >> "$security_report" 2>/dev/null; then
        log_warning "Mots-cl√©s sensibles d√©tect√©s - V√©rifiez qu'aucun secret n'est en dur"
        security_passed=false
    else
        log_success "Aucun mot-cl√© sensible d√©tect√©"
        echo "‚úÖ Aucun mot-cl√© sensible d√©tect√©" >> "$security_report"
    fi

    if [[ "$security_passed" == true ]]; then
        log_success "Analyse de s√©curit√© r√©ussie"
        return 0
    else
        log_error "Probl√®mes de s√©curit√© d√©tect√©s"
        return 1
    fi
}

# V√©rification des performances
run_performance_check() {
    log_step "‚ö° V√©rification des performances..."

    local perf_report="$REPORTS_DIR/performance-$TIMESTAMP.txt"
    local perf_passed=true

    {
        echo "=== Rapport de Performance ==="
        echo "Date: $(date)"
        echo ""
    } > "$perf_report"

    # Tests de performance si ils existent
    if [[ -d "$PROJECT_ROOT/tests/Performance" ]]; then
        log_info "Ex√©cution des tests de performance..."

        # V√©rifier que les factories sont correctes avant les tests
        log_info "V√©rification des factories..."
        echo "=== V√©rification des factories ===" >> "$perf_report"

        php artisan tinker --execute="
            try {
                \App\Models\RH\Employe::factory()->make();
                echo 'EmployeFactory: OK' . PHP_EOL;
            } catch (Exception \$e) {
                echo 'EmployeFactory: ERREUR - ' . \$e->getMessage() . PHP_EOL;
            }

            try {
                \App\Models\Chantiers\Chantiers::factory()->make();
                echo 'ChantiersFactory: OK' . PHP_EOL;
            } catch (Exception \$e) {
                echo 'ChantiersFactory: ERREUR - ' . \$e->getMessage() . PHP_EOL;
            }
        " >> "$perf_report" 2>&1 || log_warning "Erreur lors de la v√©rification des factories"

        # Ex√©cuter les tests de performance avec gestion d'erreur
        if php artisan test tests/Performance --coverage-text >> "$perf_report" 2>&1; then
            log_success "Tests de performance r√©ussis"
        else
            log_error "√âchec des tests de performance"
            perf_passed=false

            log_info "V√©rification des patterns N+1 dans le code..."
            echo "" >> "$perf_report"
            echo "=== Analyse des patterns N+1 ===" >> "$perf_report"

            # Analyse statique des patterns N+1
            if grep -r "foreach.*->.*->" app/Models/ app/Livewire/ --include="*.php" | head -5 >> "$perf_report" 2>/dev/null; then
                log_warning "Patterns N+1 potentiels d√©tect√©s"
                echo "" >> "$perf_report"
                echo "üí° Recommandations:" >> "$perf_report"
                echo "   - Utilisez with() pour l'eager loading" >> "$perf_report"
                echo "   - Consid√©rez load() pour le lazy eager loading" >> "$perf_report"
                echo "   - V√©rifiez les relations dans vos mod√®les" >> "$perf_report"
            else
                log_success "Aucun pattern N+1 √©vident d√©tect√©"
            fi
        fi
    else
        log_info "Aucun test de performance configur√©"

        # V√©rification basique des requ√™tes N+1 dans le code
        log_info "Recherche de patterns N+1 potentiels..."
        echo "=== Recherche de patterns N+1 ===" >> "$perf_report"

        if grep -r "foreach.*->.*->" app/Models/ app/Livewire/ --include="*.php" | head -3 >> "$perf_report" 2>/dev/null; then
            log_warning "Patterns N+1 potentiels d√©tect√©s - V√©rifiez l'utilisation d'eager loading"
        else
            log_success "Aucun pattern N+1 √©vident d√©tect√©"
            echo "‚úÖ Aucun pattern N+1 √©vident d√©tect√©" >> "$perf_report"
        fi
    fi

    if [[ "$perf_passed" == true ]]; then
        log_success "V√©rification des performances r√©ussie"
        return 0
    else
        log_warning "Probl√®mes de performance d√©tect√©s (non bloquant)"
        return 0  # Ne pas faire √©chouer pour les performances
    fi
}

# Analyse de la qualit√© du code
run_code_quality() {
    log_step "üìä Analyse de la qualit√© du code..."

    local quality_report="$REPORTS_DIR/code-quality-$TIMESTAMP.md"
    local pint_status="success"
    local phpstan_status="success"

    # Cr√©er le r√©pertoire de rapports de qualit√©
    mkdir -p "$REPORTS_DIR/code-quality"

    {
        echo "# üìä Rapport de Qualit√© du Code"
        echo ""
        echo "**Date:** $(date '+%Y-%m-%d %H:%M:%S')"
        echo "**Modules:** ${MODULES[*]}"
        echo ""
    } > "$quality_report"

    # Laravel Pint
    log_info "Ex√©cution de Laravel Pint..."
    echo "## üé® Laravel Pint (Code Style)" >> "$quality_report"

    if command -v ./vendor/bin/pint &> /dev/null; then
        log_success "Laravel Pint d√©tect√©"

        # Ex√©cuter Pint avec capture de sortie
        if ./vendor/bin/pint --test --format=json > "$REPORTS_DIR/code-quality/pint-report.json" 2>&1; then
            log_success "Laravel Pint: Aucun probl√®me de style d√©tect√©"
            echo "**Statut:** ‚úÖ Succ√®s" >> "$quality_report"
            echo "" >> "$quality_report"
            echo "```" >> "$quality_report"
            echo "‚úÖ Code style conforme aux standards Laravel" >> "$quality_report"
            echo "```" >> "$quality_report"
        else
            log_error "Laravel Pint: Probl√®mes de style d√©tect√©s"
            pint_status="failure"

            # G√©n√©rer un rapport lisible
            ./vendor/bin/pint --test > "$REPORTS_DIR/code-quality/pint-output.txt" 2>&1 || true

            echo "**Statut:** ‚ùå √âchec" >> "$quality_report"
            echo "" >> "$quality_report"
            echo "```" >> "$quality_report"
            head -20 "$REPORTS_DIR/code-quality/pint-output.txt" >> "$quality_report"
            echo "```" >> "$quality_report"
        fi
    else
        log_warning "Laravel Pint non configur√©"
        pint_status="skipped"
        echo "**Statut:** ‚ö†Ô∏è Ignor√©" >> "$quality_report"
        echo "" >> "$quality_report"
        echo "```" >> "$quality_report"
        echo "‚ö†Ô∏è Laravel Pint non configur√© dans le projet" >> "$quality_report"
        echo "```" >> "$quality_report"
    fi

    echo "" >> "$quality_report"

    # PHPStan
    log_info "Ex√©cution de PHPStan..."
    echo "## üîç PHPStan (Analyse Statique)" >> "$quality_report"

    if [[ -f "$PROJECT_ROOT/phpstan.neon.dist" ]] && command -v ./vendor/bin/phpstan &> /dev/null; then
        log_success "PHPStan d√©tect√©"

        # Ex√©cuter PHPStan avec capture de sortie
        if ./vendor/bin/phpstan analyse --memory-limit=2G --error-format=json > "$REPORTS_DIR/code-quality/phpstan-report.json" 2>&1; then
            log_success "PHPStan: Aucune erreur d√©tect√©e"
            echo "**Statut:** ‚úÖ Succ√®s" >> "$quality_report"
            echo "" >> "$quality_report"
            echo "```" >> "$quality_report"
            echo "‚úÖ Analyse statique r√©ussie - Aucune erreur d√©tect√©e" >> "$quality_report"
            echo "```" >> "$quality_report"
        else
            log_error "PHPStan: Erreurs d√©tect√©es"
            phpstan_status="failure"

            # G√©n√©rer un rapport lisible
            ./vendor/bin/phpstan analyse --memory-limit=2G > "$REPORTS_DIR/code-quality/phpstan-output.txt" 2>&1 || true

            echo "**Statut:** ‚ùå √âchec" >> "$quality_report"
            echo "" >> "$quality_report"
            echo "```" >> "$quality_report"
            head -30 "$REPORTS_DIR/code-quality/phpstan-output.txt" >> "$quality_report"
            echo "```" >> "$quality_report"
        fi
    else
        log_warning "PHPStan non configur√©"
        phpstan_status="skipped"
        echo "**Statut:** ‚ö†Ô∏è Ignor√©" >> "$quality_report"
        echo "" >> "$quality_report"
        echo "```" >> "$quality_report"
        echo "‚ö†Ô∏è PHPStan non configur√© dans le projet" >> "$quality_report"
        echo "```" >> "$quality_report"
    fi

    # R√©sum√©
    echo "" >> "$quality_report"
    echo "## üìã R√©sum√©" >> "$quality_report"
    echo "" >> "$quality_report"
    echo "| Outil | Statut | Description |" >> "$quality_report"
    echo "|-------|--------|-------------|" >> "$quality_report"
    echo "| Laravel Pint | $pint_status | V√©rification du style de code |" >> "$quality_report"
    echo "| PHPStan | $phpstan_status | Analyse statique du code |" >> "$quality_report"
    echo "" >> "$quality_report"

    # Actions recommand√©es
    echo "## üîß Actions Recommand√©es" >> "$quality_report"
    echo "" >> "$quality_report"

    if [[ "$pint_status" == "failure" ]]; then
        echo "### üé® Corrections Laravel Pint" >> "$quality_report"
        echo "- Ex√©cutez \`./vendor/bin/pint\` pour corriger automatiquement les probl√®mes de style" >> "$quality_report"
        echo "- V√©rifiez la configuration dans \`pint.json\`" >> "$quality_report"
        echo "" >> "$quality_report"
    fi

    if [[ "$phpstan_status" == "failure" ]]; then
        echo "### üîç Corrections PHPStan" >> "$quality_report"
        echo "- Corrigez les erreurs d'analyse statique d√©tect√©es" >> "$quality_report"
        echo "- Ajoutez les annotations de type manquantes" >> "$quality_report"
        echo "- V√©rifiez la configuration dans \`phpstan.neon.dist\`" >> "$quality_report"
        echo "" >> "$quality_report"
    fi

    log_info "Rapport g√©n√©r√©: $quality_report"

    if [[ "$pint_status" == "failure" ]] || [[ "$phpstan_status" == "failure" ]]; then
        log_error "√âchec des v√©rifications de qualit√© du code"
        log_info "üìä Laravel Pint: $pint_status"
        log_info "üîç PHPStan: $phpstan_status"
        log_info "üìÑ Consultez le rapport d√©taill√©: $quality_report"
        return 1
    else
        log_success "Analyse de qualit√© r√©ussie"
        return 0
    fi
}

# Fonction principale
main() {
    echo -e "${CYAN}"
    echo "üèóÔ∏è =============================================="
    echo "   Module CI/CD - Ex√©cution Locale"
    echo "   Timestamp: $TIMESTAMP"
    echo "==============================================="
    echo -e "${NC}"

    cd "$PROJECT_ROOT"

    # V√©rifications pr√©liminaires
    check_requirements

    # Si RUN_ALL est activ√©, d√©finir tous les modules
    if [[ "$RUN_ALL" == true ]]; then
        MODULES=("chantiers" "rh" "tiers" "commerce" "core")
        log_info "Mode --all activ√©: tous les modules seront trait√©s"
    fi

    # D√©tection des modules modifi√©s (sauf si des modules sp√©cifiques sont fournis)
    if [[ ${#MODULES[@]} -eq 0 ]] || [[ "$DETECT_ONLY" == true ]]; then
        if ! detect_changed_modules; then
            log_info "Aucun module √† traiter"
            exit 0
        fi
    fi

    # Installation des d√©pendances
    install_dependencies

    # Variables de suivi des r√©sultats
    local overall_success=true
    local tests_success=true
    local security_success=true
    local performance_success=true
    local quality_success=true

    # Ex√©cution des tests par module
    if [[ "$SECURITY_ONLY" != true ]] && [[ "$PERFORMANCE_ONLY" != true ]] && [[ "$QUALITY_ONLY" != true ]]; then
        log_step "üß™ Ex√©cution des tests par module..."
        for module in "${MODULES[@]}"; do
            if ! run_module_tests "$module"; then
                tests_success=false
                overall_success=false
            fi
        done

        if [[ "$tests_success" == true ]]; then
            log_success "Tous les tests de modules r√©ussis"
        else
            log_error "√âchec de certains tests de modules"
        fi
    fi

    # Analyse de s√©curit√©
    if [[ "$TESTS_ONLY" != true ]] && [[ "$PERFORMANCE_ONLY" != true ]] && [[ "$QUALITY_ONLY" != true ]]; then
        if ! run_security_scan; then
            security_success=false
            overall_success=false
        fi
    fi

    # V√©rification des performances
    if [[ "$TESTS_ONLY" != true ]] && [[ "$SECURITY_ONLY" != true ]] && [[ "$QUALITY_ONLY" != true ]]; then
        if ! run_performance_check; then
            performance_success=false
            # Note: les performances ne font pas √©chouer le build global
        fi
    fi

    # Analyse de la qualit√© du code
    if [[ "$TESTS_ONLY" != true ]] && [[ "$SECURITY_ONLY" != true ]] && [[ "$PERFORMANCE_ONLY" != true ]]; then
        if ! run_code_quality; then
            quality_success=false
            overall_success=false
        fi
    fi

    # Rapport final
    echo ""
    echo -e "${CYAN}üìä =============================================="
    echo "   RAPPORT FINAL"
    echo "===============================================${NC}"

    echo -e "üß™ Tests de modules:     $([ "$tests_success" == true ] && echo -e "${GREEN}‚úÖ R√âUSSI${NC}" || echo -e "${RED}‚ùå √âCHEC${NC}")"
    echo -e "üîí Analyse de s√©curit√©:  $([ "$security_success" == true ] && echo -e "${GREEN}‚úÖ R√âUSSI${NC}" || echo -e "${RED}‚ùå √âCHEC${NC}")"
    echo -e "‚ö° V√©rif. performances: $([ "$performance_success" == true ] && echo -e "${GREEN}‚úÖ R√âUSSI${NC}" || echo -e "${YELLOW}‚ö†Ô∏è AVERTISSEMENT${NC}")"
    echo -e "üìä Qualit√© du code:     $([ "$quality_success" == true ] && echo -e "${GREEN}‚úÖ R√âUSSI${NC}" || echo -e "${RED}‚ùå √âCHEC${NC}")"

    echo ""
    echo -e "üìÅ Rapports g√©n√©r√©s dans: ${BLUE}$REPORTS_DIR${NC}"
    echo ""

    if [[ "$overall_success" == true ]]; then
        log_success "üéâ Toutes les v√©rifications sont r√©ussies !"
        exit 0
    else
        log_error "‚ùå Certaines v√©rifications ont √©chou√©"
        exit 1
    fi
}

# Ex√©cution du script principal
main "$@"
