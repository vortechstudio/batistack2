name: Security Scan

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  schedule:
    - cron: '0 2 * * 1' # Lundi √† 2h

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Composer Audit
        run: composer audit

      - name: Run NPM Audit
        run: npm audit --audit-level=moderate

      - name: Security Headers Check
        run: |
          # V√©rifier les headers de s√©curit√© avec gestion d'erreur
          echo "üîç V√©rification des headers de s√©curit√©..."

          # D√©finir l'URL √† tester
          URL="https://beta.batistack.ovh"

          # Tester la connectivit√© d'abord
          if curl -s --connect-timeout 10 --max-time 30 -f "$URL" > /dev/null; then
            echo "‚úÖ Site accessible : $URL"

            # R√©cup√©rer les headers
            HEADERS=$(curl -I -s --connect-timeout 10 --max-time 30 "$URL" 2>/dev/null)

            if [ $? -eq 0 ]; then
              echo "üìã Headers re√ßus :"
              echo "$HEADERS"
              echo ""

              # V√©rifier les headers de s√©curit√© sp√©cifiques
              echo "üîí V√©rification des headers de s√©curit√© :"

              # X-Frame-Options
              if echo "$HEADERS" | grep -qi "X-Frame-Options"; then
                echo "‚úÖ X-Frame-Options: $(echo "$HEADERS" | grep -i "X-Frame-Options" | head -1)"
              else
                echo "‚ùå X-Frame-Options: MANQUANT"
              fi

              # X-Content-Type-Options
              if echo "$HEADERS" | grep -qi "X-Content-Type-Options"; then
                echo "‚úÖ X-Content-Type-Options: $(echo "$HEADERS" | grep -i "X-Content-Type-Options" | head -1)"
              else
                echo "‚ùå X-Content-Type-Options: MANQUANT"
              fi

              # Strict-Transport-Security
              if echo "$HEADERS" | grep -qi "Strict-Transport-Security"; then
                echo "‚úÖ Strict-Transport-Security: $(echo "$HEADERS" | grep -i "Strict-Transport-Security" | head -1)"
              else
                echo "‚ùå Strict-Transport-Security: MANQUANT"
              fi

              # Content-Security-Policy
              if echo "$HEADERS" | grep -qi "Content-Security-Policy"; then
                echo "‚úÖ Content-Security-Policy: $(echo "$HEADERS" | grep -i "Content-Security-Policy" | head -1)"
              else
                echo "‚ùå Content-Security-Policy: MANQUANT"
              fi

              # X-XSS-Protection
              if echo "$HEADERS" | grep -qi "X-XSS-Protection"; then
                echo "‚úÖ X-XSS-Protection: $(echo "$HEADERS" | grep -i "X-XSS-Protection" | head -1)"
              else
                echo "‚ùå X-XSS-Protection: MANQUANT"
              fi

            else
              echo "‚ùå Erreur lors de la r√©cup√©ration des headers"
              exit 1
            fi
          else
            echo "‚ùå Site non accessible : $URL"
            echo "‚ö†Ô∏è  V√©rification des headers de s√©curit√© ignor√©e (site non accessible)"
            # Ne pas faire √©chouer le workflow si le site n'est pas accessible
            exit 0
          fi

      - name: OWASP ZAP Baseline Scan
        if: github.event_name != 'pull_request'
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'https://beta.batistack.ovh'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        continue-on-error: true

      - name: Upload ZAP Report
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html
        continue-on-error: true
