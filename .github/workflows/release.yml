name: üì¶ Release

on:
  push:
    branches: [ production ]
  workflow_dispatch:

permissions:
  issues: write
  pull-requests: write
  contents: write

jobs:
  release:
    name: üì¶ Semantic Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Analyze changed modules
        id: modules
        run: |
          # Analyser les modules modifi√©s depuis le dernier tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGED_FILES=$(git diff --name-only $LAST_TAG..HEAD)
          else
            CHANGED_FILES=$(git ls-files)
          fi

          # D√©tecter les modules modifi√©s
          MODULES=""
          if echo "$CHANGED_FILES" | grep -q "app/.*Chantiers\|app/Models/Chantiers"; then
            MODULES="$MODULESüè¢ Chantiers "
          fi
          if echo "$CHANGED_FILES" | grep -q "app/.*RH\|app/Models/RH"; then
            MODULES="$MODULESüë• RH "
          fi
          if echo "$CHANGED_FILES" | grep -q "app/.*Tiers\|app/Models/Tiers"; then
            MODULES="$MODULESü§ù Tiers "
          fi
          if echo "$CHANGED_FILES" | grep -q "app/.*Commerce\|app/Models/Commerce"; then
            MODULES="$MODULESüíº Commerce "
          fi
          if echo "$CHANGED_FILES" | grep -q "app/.*Produit\|app/Models/Produit"; then
            MODULES="$MODULESüì¶ Produits "
          fi
          if echo "$CHANGED_FILES" | grep -q "app/.*Core\|app/Models/Core"; then
            MODULES="$MODULES‚öôÔ∏è Core "
          fi

          echo "modules=$MODULES" >> $GITHUB_OUTPUT

      - name: üöÄ Semantic Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODULES_CHANGED: ${{ steps.modules.outputs.modules }}
        run: |
          npx semantic-release
          # Capturer la version cr√©√©e
          NEW_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: üìß Generate Email Content
        if: success() && steps.semantic_release.outputs.version != ''
        id: email
        run: |
          VERSION="${{ steps.semantic_release.outputs.version }}"
          MODULES="${{ steps.modules.outputs.modules }}"
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/$VERSION"

          # G√©n√©rer le contenu de l'email
          cat > email_content.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <style>
                  body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                  .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; }
                  .content { padding: 20px; }
                  .version { background: #f8f9fa; border-left: 4px solid #007bff; padding: 15px; margin: 20px 0; }
                  .modules { background: #e8f5e8; border-radius: 8px; padding: 15px; margin: 20px 0; }
                  .footer { background: #f8f9fa; padding: 15px; text-align: center; font-size: 0.9em; }
                  .btn { display: inline-block; background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üéâ Nouvelle version de Batistack</h1>
                  <h2>Version $VERSION</h2>
              </div>

              <div class="content">
                  <div class="version">
                      <h3>üì¶ Informations de la release</h3>
                      <ul>
                          <li><strong>Version :</strong> $VERSION</li>
                          <li><strong>Date :</strong> $(date '+%d/%m/%Y √† %H:%M')</li>
                          <li><strong>Branche :</strong> production</li>
                      </ul>
                  </div>

                  <div class="modules">
                      <h3>üèóÔ∏è Modules mis √† jour</h3>
                      <p>Cette version inclut des am√©liorations sur les modules suivants :</p>
                      <p><strong>$MODULES</strong></p>
                  </div>

                  <h3>üìã Changelog complet</h3>
                  <p>Pour consulter le changelog d√©taill√© de cette version, veuillez vous rendre sur :</p>
                  <p><a href="$RELEASE_URL" class="btn">üìñ Voir le changelog complet</a></p>

                  <h3>üöÄ D√©ploiement</h3>
                  <p>Cette version sera automatiquement d√©ploy√©e sur l'environnement de production selon la planification d√©finie.</p>
              </div>

              <div class="footer">
                  <p>Cet email a √©t√© g√©n√©r√© automatiquement par le syst√®me de release de Batistack.</p>
                  <p>Pour toute question, contactez l'√©quipe de d√©veloppement.</p>
              </div>
          </body>
          </html>
          EOF

          echo "email_generated=true" >> $GITHUB_OUTPUT

      - name: üì¨ Send Slack Notification
        if: success() && steps.semantic_release.outputs.version != ''
        uses: 8398a7/action-slack@v3
        with:
          status: success
          custom_payload: |
            {
              "channel": "#releases",
              "username": "Batistack Release Bot",
              "icon_emoji": ":rocket:",
              "attachments": [
                {
                  "color": "good",
                  "title": "üéâ Nouvelle version de Batistack publi√©e !",
                  "title_link": "https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic_release.outputs.version }}",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "${{ steps.semantic_release.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Modules modifi√©s",
                      "value": "${{ steps.modules.outputs.modules || 'Aucun module sp√©cifique' }}",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "D√©ploy√© par",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ],
                  "footer": "Batistack Release System",
                  "ts": ${{ github.event.head_commit.timestamp && github.event.head_commit.timestamp || 'null' }}
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: üìß Upload Email Content
        if: success() && steps.email.outputs.email_generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: changelog-email-${{ steps.semantic_release.outputs.version }}
          path: email_content.html
          retention-days: 30

      - name: üìÆ Send Changelog Email
        if: success() && steps.email.outputs.email_generated == 'true'
        run: |
          # Installer nodemailer si n√©cessaire
          npm install nodemailer

          # Envoyer l'email
          node .github/scripts/send-changelog-email.js
        env:
          RELEASE_VERSION: ${{ steps.semantic_release.outputs.version }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_SECURE: ${{ secrets.SMTP_SECURE }}

      - name: üìä Release Summary
        if: success()
        run: |
          echo "## üéâ Release cr√©√©e avec succ√®s !" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.semantic_release.outputs.version }}" ]; then
            echo "### üì¶ Version publi√©e : ${{ steps.semantic_release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "### üèóÔ∏è Modules modifi√©s dans cette release :" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.modules.outputs.modules }}" ]; then
            echo "${{ steps.modules.outputs.modules }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "Aucun module sp√©cifique d√©tect√©" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Actions effectu√©es :" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Version d√©tect√©e automatiquement par semantic-release" >> $GITHUB_STEP_SUMMARY
          echo "- üìù Changelog g√©n√©r√© automatiquement" >> $GITHUB_STEP_SUMMARY
          echo "- üè∑Ô∏è Tag Git cr√©√© automatiquement" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ Release GitHub cr√©√©e automatiquement" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.semantic_release.outputs.version }}" ]; then
            echo "- üì¨ Notification Slack envoy√©e" >> $GITHUB_STEP_SUMMARY
            echo "- üìß Email de changelog g√©n√©r√© et disponible en artifact" >> $GITHUB_STEP_SUMMARY
            echo "- üìÆ Email automatiquement envoy√© √† changelog@batistack.ovh" >> $GITHUB_STEP_SUMMARY
          fi
