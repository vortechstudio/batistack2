name: 📊 Code Metrics & Quality Gate

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ master ]
    types: [ closed ]
  schedule:
    - cron: '0 2 * * 1' # Tous les lundis à 2h
  workflow_dispatch:
    inputs:
      create_issue:
        description: 'Créer une issue en cas de problème'
        required: false
        default: 'true'
        type: boolean
      slack_notification:
        description: 'Envoyer une notification Slack'
        required: false
        default: 'true'
        type: boolean

env:
  PHP_VERSION: '8.3'

permissions:
  issues: write
  pull-requests: write
  contents: write


jobs:
  quality-gate:
    name: 🚦 Quality Gate - Métriques & Seuils
    runs-on: ubuntu-latest
    outputs:
      quality-status: ${{ steps.quality-check.outputs.status }}
      complexity-score: ${{ steps.quality-check.outputs.complexity }}
      maintainability-score: ${{ steps.quality-check.outputs.maintainability }}
      coverage-score: ${{ steps.quality-check.outputs.coverage }}
      violations-count: ${{ steps.quality-check.outputs.violations }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick
          coverage: xdebug

      - name: 📦 Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}-metrics
          restore-keys: |
            composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}-
            composer-${{ runner.os }}-

      - name: 📦 Install dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: 📦 Install dependencies
        run: npm install

      - name: 🔧 Build assets
        run: npm run build

      - name: 📁 Create reports directory
        run: mkdir -p reports/metrics

      - name: 📊 Generate PHPMetrics report
        run: |
          ./vendor/bin/phpmetrics --report-html=reports/metrics --report-json=reports/metrics/metrics.json app/

      - name: 📈 Generate PHPStan analysis
        run: |
          ./vendor/bin/phpstan analyse --no-progress --error-format=json > reports/metrics/phpstan.json || true
          ./vendor/bin/phpstan analyse --no-progress --error-format=table > reports/metrics/phpstan.txt || true

      - name: Configure Laravel
        run: |
          cp .env.github .env
          php artisan key:generate

      - name: Write secrets to .env
        run: |
          echo "BRIDGE_CLIENT_ID=${{ secrets.BRIDGE_CLIENT_ID }}" >> .env
          echo "BRIDGE_CLIENT_SECRET=${{ secrets.BRIDGE_CLIENT_SECRET }}" >> .env

      - name: 🧪 Run tests with coverage
        run: |
          php artisan migrate --force
          ./vendor/bin/pest --coverage --coverage-clover=reports/metrics/coverage.xml --coverage-html=reports/metrics/coverage

      - name: 🎨 Check code style
        run: |
          ./vendor/bin/pint --test > reports/metrics/pint.txt || echo "Style issues detected"

      - name: 🚦 Analyze quality metrics
        id: quality-check
        run: |
          # Initialiser les variables
          QUALITY_STATUS="success"
          COMPLEXITY_SCORE=0
          MAINTAINABILITY_SCORE=0
          COVERAGE_SCORE=0
          VIOLATIONS_COUNT=0

          # Analyser PHPMetrics (si le fichier JSON existe)
          if [ -f "reports/metrics/metrics.json" ]; then
            # Extraire les métriques principales (approximation)
            COMPLEXITY_SCORE=$(jq -r '.complexity // 0' reports/metrics/metrics.json 2>/dev/null || echo "0")
            MAINTAINABILITY_SCORE=$(jq -r '.maintainability // 0' reports/metrics/metrics.json 2>/dev/null || echo "0")
          fi

          # Analyser PHPStan
          if [ -f "reports/metrics/phpstan.json" ]; then
            VIOLATIONS_COUNT=$(jq '.totals.file_errors // 0' reports/metrics/phpstan.json 2>/dev/null || echo "0")
          fi

          # Définir les seuils de qualité
          MAX_VIOLATIONS=10
          MAX_COMPLEXITY=10

          # Vérifier les seuils
          echo "📊 Métriques de qualité:"
          echo "- Violations PHPStan: ${VIOLATIONS_COUNT} (max: ${MAX_VIOLATIONS})"
          echo "- Complexité moyenne: ${COMPLEXITY_SCORE} (max: ${MAX_COMPLEXITY})"

          if (( VIOLATIONS_COUNT > MAX_VIOLATIONS )); then
            echo "❌ Trop de violations PHPStan: ${VIOLATIONS_COUNT} > ${MAX_VIOLATIONS}"
            QUALITY_STATUS="failed"
          fi

          # Exporter les résultats
          echo "status=$QUALITY_STATUS" >> $GITHUB_OUTPUT
          echo "complexity=$COMPLEXITY_SCORE" >> $GITHUB_OUTPUT
          echo "maintainability=$MAINTAINABILITY_SCORE" >> $GITHUB_OUTPUT
          echo "violations=$VIOLATIONS_COUNT" >> $GITHUB_OUTPUT

          # Créer un résumé détaillé
          cat > reports/metrics/quality-summary.md << EOF
          # 📊 Rapport de Qualité - $(date)

          ## 🎯 Statut Global: $([ "$QUALITY_STATUS" = "success" ] && echo "✅ SUCCÈS" || echo "❌ ÉCHEC")

          ## 📈 Métriques Principales
          - **Violations PHPStan**: ${VIOLATIONS_COUNT} $([ $VIOLATIONS_COUNT -le $MAX_VIOLATIONS ] && echo "✅" || echo "❌")
          - **Complexité moyenne**: ${COMPLEXITY_SCORE}

          ## 📁 Structure du Projet
          EOF

          # Ajouter les statistiques de fichiers
          echo "- Fichiers PHP: $(find app/ -name "*.php" | wc -l)" >> reports/metrics/quality-summary.md
          echo "- Fichiers de tests: $(find tests/ -name "*.php" | wc -l)" >> reports/metrics/quality-summary.md
          echo "" >> reports/metrics/quality-summary.md
          echo "## 🏗️ Modules" >> reports/metrics/quality-summary.md
          for module in Chantiers RH Tiers Commerce Produit Core; do
            count=$(find app/Models/$module app/Livewire/*$module* -name "*.php" 2>/dev/null | wc -l)
            echo "- $module: $count fichiers" >> reports/metrics/quality-summary.md
          done

          # Échec si quality gate échoue
          if [ "$QUALITY_STATUS" = "failed" ]; then
            echo "🚫 Quality Gate échoué - Les seuils de qualité ne sont pas respectés"
            exit 1
          fi

      - name: 📤 Upload metrics artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-metrics-${{ github.sha }}
          path: reports/metrics/
          retention-days: 30

      - name: 📊 Comment PR with metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'reports/metrics/quality-summary.md';

            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 📊 Rapport de Qualité du Code\n\n${summary}\n\n---\n*Généré automatiquement par le workflow Code Metrics*`
              });
            }

  notifications:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: quality-gate
    if: always() && (needs.quality-gate.outputs.quality-status == 'failed' || github.event.inputs.slack_notification == 'true')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔴 Create GitHub Issue on failure
        if: needs.quality-gate.outputs.quality-status == 'failed' && (github.event.inputs.create_issue == 'true' || github.event.inputs.create_issue == '')
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Quality Gate Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## 🚫 Quality Gate Failure

            Le workflow de métriques de code a échoué sur la branche \`${{ github.ref_name }}\`.

            ### 📊 Métriques
            - **Violations PHPStan**: ${{ needs.quality-gate.outputs.violations-count }}
            - **Complexité**: ${{ needs.quality-gate.outputs.complexity-score }}

            ### 🔗 Liens
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})

            ### 📋 Actions Requises
            - [ ] Corriger les violations PHPStan
            - [ ] Réduire la complexité du code
            - [ ] Relancer le workflow après corrections

            ---
            *Issue créée automatiquement par le workflow Code Metrics*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['quality', 'metrics', 'bug']
            });

      - name: 📱 Send Slack notification
        if: github.event.inputs.slack_notification == 'true' || needs.quality-gate.outputs.quality-status == 'failed'
        uses: actions/github-script@v7
        with:
           script: |
             // Note: Nécessite la configuration d'un webhook Slack dans les secrets
             // SLACK_WEBHOOK doit être défini dans les secrets du repository

             const webhookUrl = '${{ secrets.SLACK_WEBHOOK }}';

             if (!webhookUrl) {
               console.log('⚠️ SLACK_WEBHOOK non configuré dans les secrets du repository');
               return;
             }

             const status = '${{ needs.quality-gate.outputs.quality-status }}';
             const violations = '${{ needs.quality-gate.outputs.violations-count }}';

             const emoji = status === 'success' ? '✅' : '❌';
             const color = status === 'success' ? 'good' : 'danger';

             const message = {
               text: `${emoji} Code Metrics - ${status.toUpperCase()}`,
               attachments: [{
                 color: color,
                 fields: [
                   {
                     title: "Repository",
                     value: "${{ github.repository }}",
                     short: true
                   },
                   {
                     title: "Branch",
                     value: "${{ github.ref_name }}",
                     short: true
                   },
                   {
                     title: "Violations",
                     value: violations,
                     short: true
                   }
                 ],
                 actions: [{
                   type: "button",
                   text: "View Workflow",
                   url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                 }]
               }]
             };

             try {
               const response = await fetch(webhookUrl, {
                 method: 'POST',
                 headers: {
                   'Content-Type': 'application/json',
                 },
                 body: JSON.stringify(message)
               });

               if (response.ok) {
                 console.log('✅ Notification Slack envoyée avec succès');
               } else {
                 console.log(`❌ Erreur lors de l'envoi Slack: ${response.status} ${response.statusText}`);
               }
             } catch (error) {
               console.log(`❌ Erreur lors de l'envoi Slack: ${error.message}`);
             }

  summary:
    name: 📋 Résumé Final
    runs-on: ubuntu-latest
    needs: [quality-gate, notifications]
    if: always()
    steps:
      - name: 📋 Generate workflow summary
        run: |
          echo "## 📊 Résumé Code Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Statut: ${{ needs.quality-gate.outputs.quality-status == 'success' && '✅ SUCCÈS' || '❌ ÉCHEC' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Métriques:" >> $GITHUB_STEP_SUMMARY
          echo "- **Violations**: ${{ needs.quality-gate.outputs.violations-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Complexité**: ${{ needs.quality-gate.outputs.complexity-score }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📅 Exécuté le: $(date)" >> $GITHUB_STEP_SUMMARY
