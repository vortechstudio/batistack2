name: 🏗️ Module CI/CD

on:
  pull_request:
    branches: [master]
    paths:
      # Modèles de tous les modules
      - 'app/Models/**'
      # Composants Livewire de tous les modules
      - 'app/Livewire/**'
      # Migrations de tous les modules
      - 'database/migrations/**'
      # Tests de tous les modules
      - 'tests/Feature/**'
      - 'tests/Unit/**'
      # Factories et seeders
      - 'database/factories/**'
      - 'database/seeders/**'
  push:
    branches: [develop]

jobs:
  detect-changed-modules:
    name: 🔍 Détection des modules modifiés
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.build-modules.outputs.modules }}
      has-changes: ${{ steps.build-modules.outputs.has-changes }}
      detection-success: ${{ steps.build-modules.outputs.detection-success }}

    steps:
      - uses: actions/checkout@v4

      - name: Détecter les changements par module
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            chantiers:
              - 'app/Models/Chantiers/**'
              - 'app/Livewire/Chantier/**'
              - 'app/Livewire/Chantiers/**'
              - 'database/migrations/**chantier**'
              - 'tests/**/*Chantier*'
            rh:
              - 'app/Models/RH/**'
              - 'app/Livewire/Humans/**'
              - 'database/migrations/**employe**'
              - 'database/migrations/**rh**'
              - 'tests/**/*RH*'
              - 'tests/**/*Employe*'
            tiers:
              - 'app/Models/Tiers/**'
              - 'app/Livewire/Tiers/**'
              - 'database/migrations/**tiers**'
              - 'tests/**/*Tiers*'
            commerce:
              - 'app/Models/Commerce/**'
              - 'database/migrations/**devis**'
              - 'database/migrations/**facture**'
              - 'database/migrations/**commande**'
              - 'tests/**/*Commerce*'
            core:
              - 'app/Models/Core/**'
              - 'app/Livewire/Core/**'
              - 'database/migrations/**core**'
              - 'tests/**/*Core*'

      - name: Construire la liste des modules
        id: build-modules
        run: |
          echo "🔍 Construction de la liste des modules modifiés..."

          MODULES=()

          if [ "${{ steps.changes.outputs.chantiers }}" = "true" ]; then
            MODULES+=("chantiers")
            echo "✅ Module Chantiers détecté"
          fi
          if [ "${{ steps.changes.outputs.rh }}" = "true" ]; then
            MODULES+=("rh")
            echo "✅ Module RH détecté"
          fi
          if [ "${{ steps.changes.outputs.tiers }}" = "true" ]; then
            MODULES+=("tiers")
            echo "✅ Module Tiers détecté"
          fi
          if [ "${{ steps.changes.outputs.commerce }}" = "true" ]; then
            MODULES+=("commerce")
            echo "✅ Module Commerce détecté"
          fi
          if [ "${{ steps.changes.outputs.core }}" = "true" ]; then
            MODULES+=("core")
            echo "✅ Module Core détecté"
          fi

          # Construire le JSON
          if [ ${#MODULES[@]} -gt 0 ]; then
            # Utiliser jq pour créer un JSON valide et compact
            MODULES_JSON=$(printf '%s\n' "${MODULES[@]}" | jq -R . | jq -s -c .)

            # Valider le JSON avant de l'écrire
            if echo "$MODULES_JSON" | jq . > /dev/null 2>&1; then
              echo "modules=$MODULES_JSON" >> $GITHUB_OUTPUT
              echo "has-changes=true" >> $GITHUB_OUTPUT
              echo "📦 Modules détectés: ${MODULES[*]}"
              echo "📦 JSON généré: $MODULES_JSON"
            else
              echo "❌ Erreur: JSON invalide généré"
              echo "modules=[]" >> $GITHUB_OUTPUT
              echo "has-changes=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "modules=[]" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Aucun module détecté"
          fi

          echo "detection-success=true" >> $GITHUB_OUTPUT
          echo "✅ Détection terminée avec succès"

  module-tests:
    name: 🧪 Tests Module ${{ matrix.module }}
    runs-on: ubuntu-latest
    needs: detect-changed-modules
    if: needs.detect-changed-modules.outputs.has-changes == 'true' && needs.detect-changed-modules.outputs.detection-success == 'true'
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.detect-changed-modules.outputs.modules) }}
        php-version: [8.3, 8.4]

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, bcmath, pdo_mysql, sqlite3

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{  hashFiles('composer.lock') }}
          restore-keys: |
            composer-

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: npm-${{  hashFiles('package-lock.json') }}
          restore-keys: |
            npm-

      - name: Setup test environment
        run: |
          cp .env.github .env
          php artisan key:generate

      - name: Run module-specific tests
        run: |
          # Tests unitaires du module
          if [ -d "tests/Unit" ]; then
            php artisan test tests/Unit --filter=${{ matrix.module }} --coverage-text || true
          fi

          # Tests fonctionnels du module
          if [ -d "tests/Feature" ]; then
            php artisan test tests/Feature --filter=${{ matrix.module }} --coverage-text || true
          fi

          # Tests génériques si pas de tests spécifiques
          php artisan test --filter=${{ matrix.module }} --coverage-text || echo "⚠️ Aucun test spécifique trouvé pour ${{ matrix.module }}"

      - name: Check module documentation
        run: |
          MODULE_DOC="resources/docs/1.0/${{ matrix.module }}.md"
          if [ ! -f "$MODULE_DOC" ]; then
            echo "⚠️ Documentation manquante pour le module ${{ matrix.module }}"
            echo "📝 Créez le fichier: $MODULE_DOC"
            # Ne pas faire échouer le build pour la documentation manquante
          else
            echo "✅ Documentation trouvée pour ${{ matrix.module }}"
          fi

  security-scan:
    name: 🔒 Analyse de sécurité
    runs-on: ubuntu-latest
    needs: detect-changed-modules
    if: needs.detect-changed-modules.outputs.has-changes == 'true' && needs.detect-changed-modules.outputs.detection-success == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run security audit
        run: |
          # Audit des dépendances Composer
          composer audit || echo "⚠️ Vulnérabilités détectées dans les dépendances"

          # Vérification des fichiers sensibles
          echo "🔍 Vérification des fichiers sensibles..."
          if grep -r "password\|secret\|key" app/ --include="*.php" | grep -v "// " | grep -v "/*" | head -5; then
            echo "⚠️ Mots-clés sensibles détectés - Vérifiez qu'aucun secret n'est en dur"
          fi

  performance-check:
    name: ⚡ Vérification des performances
    runs-on: ubuntu-latest
    needs: detect-changed-modules
    if: needs.detect-changed-modules.outputs.has-changes == 'true' && needs.detect-changed-modules.outputs.detection-success == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, bcmath, pdo_mysql, sqlite3

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Setup test environment
        run: |
          cp .env.github .env
          php artisan key:generate

      - name: Check for N+1 queries
        run: |
          # Tests de performance si ils existent
          if [ -d "tests/Performance" ]; then
            echo "🧪 Exécution des tests de performance..."

            # Vérifier que les factories sont correctes avant les tests
            echo "🔍 Vérification des factories..."
            php artisan tinker --execute="
              try {
                \App\Models\RH\Employe::factory()->make();
                echo 'EmployeFactory: OK' . PHP_EOL;
              } catch (Exception \$e) {
                echo 'EmployeFactory: ERREUR - ' . \$e->getMessage() . PHP_EOL;
              }

              try {
                \App\Models\Chantiers\Chantiers::factory()->make();
                echo 'ChantiersFactory: OK' . PHP_EOL;
              } catch (Exception \$e) {
                echo 'ChantiersFactory: ERREUR - ' . \$e->getMessage() . PHP_EOL;
              }
            " || echo "⚠️ Erreur lors de la vérification des factories"

            # Exécuter les tests de performance avec gestion d'erreur
            if php artisan test tests/Performance --coverage-text; then
              echo "✅ Tests de performance réussis"
            else
              echo "❌ Échec des tests de performance"
              echo "🔍 Vérification des patterns N+1 dans le code..."

              # Analyse statique des patterns N+1
              if grep -r "foreach.*->.*->" app/Models/ app/Livewire/ --include="*.php" | head -5; then
                echo "⚠️ Patterns N+1 potentiels détectés:"
                grep -r "foreach.*->.*->" app/Models/ app/Livewire/ --include="*.php" | head -5
                echo ""
                echo "💡 Recommandations:"
                echo "   - Utilisez with() pour l'eager loading"
                echo "   - Considérez load() pour le lazy eager loading"
                echo "   - Vérifiez les relations dans vos modèles"
              fi

              # Ne pas faire échouer le workflow pour les tests de performance
              echo "⚠️ Tests de performance ignorés (erreurs de configuration)"
            fi
          else
            echo "ℹ️ Aucun test de performance configuré"

            # Vérification basique des requêtes N+1 dans le code
            echo "🔍 Recherche de patterns N+1 potentiels..."
            if grep -r "foreach.*->.*->" app/Models/ app/Livewire/ --include="*.php" | head -3; then
              echo "⚠️ Patterns N+1 potentiels détectés - Vérifiez l'utilisation d'eager loading"
            else
              echo "✅ Aucun pattern N+1 évident détecté"
            fi
          fi

          # Vérification basique des requêtes N+1 dans le code
          echo "🔍 Recherche de patterns N+1 potentiels..."
          if grep -r "foreach.*->.*->" app/Models/ app/Livewire/ --include="*.php" | head -3; then
            echo "⚠️ Patterns N+1 potentiels détectés - Vérifiez l'utilisation d'eager loading"
          fi

  code-quality:
    name: 📊 Qualité du code
    runs-on: ubuntu-latest
    needs: detect-changed-modules
    if: needs.detect-changed-modules.outputs.has-changes == 'true' && needs.detect-changed-modules.outputs.detection-success == 'true'
    outputs:
      pint-status: ${{ steps.pint-check.outputs.status }}
      phpstan-status: ${{ steps.phpstan-check.outputs.status }}
      report-path: ${{ steps.generate-report.outputs.report-path }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Create reports directory
        run: mkdir -p reports/code-quality

      - name: Run Laravel Pint
        id: pint-check
        run: |
          echo "🎨 Exécution de Laravel Pint..."
          PINT_STATUS="success"
          PINT_OUTPUT=""

          if command -v ./vendor/bin/pint &> /dev/null; then
            echo "✅ Laravel Pint détecté"

            # Exécuter Pint avec capture de sortie
            if ./vendor/bin/pint --test --format=json > reports/code-quality/pint-report.json 2>&1; then
              echo "✅ Laravel Pint: Aucun problème de style détecté"
              PINT_OUTPUT="✅ Code style conforme aux standards Laravel"
            else
              echo "❌ Laravel Pint: Problèmes de style détectés"
              PINT_STATUS="failure"

              # Générer un rapport lisible
              ./vendor/bin/pint --test > reports/code-quality/pint-output.txt 2>&1 || true
              PINT_OUTPUT=$(cat reports/code-quality/pint-output.txt | head -20)

              echo "📋 Problèmes détectés:"
              echo "$PINT_OUTPUT"
            fi
          else
            echo "⚠️ Laravel Pint non configuré"
            PINT_STATUS="skipped"
            PINT_OUTPUT="⚠️ Laravel Pint non configuré dans le projet"
          fi

          echo "status=$PINT_STATUS" >> $GITHUB_OUTPUT
          echo "output<<EOF" >> $GITHUB_OUTPUT
          echo "$PINT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run PHPStan
        id: phpstan-check
        run: |
          echo "🔍 Exécution de PHPStan..."
          PHPSTAN_STATUS="success"
          PHPSTAN_OUTPUT=""

          if [ -f "phpstan.neon.dist" ] && command -v ./vendor/bin/phpstan &> /dev/null; then
            echo "✅ PHPStan détecté"

            # Exécuter PHPStan avec capture de sortie
            if ./vendor/bin/phpstan analyse --memory-limit=2G --error-format=json > reports/code-quality/phpstan-report.json 2>&1; then
              echo "✅ PHPStan: Aucune erreur détectée"
              PHPSTAN_OUTPUT="✅ Analyse statique réussie - Aucune erreur détectée"
            else
              echo "❌ PHPStan: Erreurs détectées"
              PHPSTAN_STATUS="failure"

              # Générer un rapport lisible
              ./vendor/bin/phpstan analyse --memory-limit=2G > reports/code-quality/phpstan-output.txt 2>&1 || true
              PHPSTAN_OUTPUT=$(cat reports/code-quality/phpstan-output.txt | head -30)

              echo "📋 Erreurs détectées:"
              echo "$PHPSTAN_OUTPUT"
            fi
          else
            echo "⚠️ PHPStan non configuré"
            PHPSTAN_STATUS="skipped"
            PHPSTAN_OUTPUT="⚠️ PHPStan non configuré dans le projet"
          fi

          echo "status=$PHPSTAN_STATUS" >> $GITHUB_OUTPUT
          echo "output<<EOF" >> $GITHUB_OUTPUT
          echo "$PHPSTAN_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate Quality Report
        id: generate-report
        if: always()
        run: |
          REPORT_FILE="reports/code-quality/quality-report-$(date +%Y%m%d-%H%M%S).md"

          cat > "$REPORT_FILE" << 'EOF'
          # 📊 Rapport de Qualité du Code

          **Date:** $(date '+%Y-%m-%d %H:%M:%S')
          **Commit:** ${{ github.sha }}
          **Branche:** ${{ github.ref_name }}
          **Modules modifiés:** ${{ needs.detect-changed-modules.outputs.modules }}

          ## 🎨 Laravel Pint (Code Style)
          **Statut:** ${{ steps.pint-check.outputs.status }}

          ```
          ${{ steps.pint-check.outputs.output }}
          ```

          ## 🔍 PHPStan (Analyse Statique)
          **Statut:** ${{ steps.phpstan-check.outputs.status }}

          ```
          ${{ steps.phpstan-check.outputs.output }}
          ```

          ## 📋 Résumé

          | Outil | Statut | Description |
          |-------|--------|-------------|
          | Laravel Pint | ${{ steps.pint-check.outputs.status }} | Vérification du style de code |
          | PHPStan | ${{ steps.phpstan-check.outputs.status }} | Analyse statique du code |

          ## 🔧 Actions Recommandées

          EOF

          # Ajouter des recommandations basées sur les résultats
          if [ "${{ steps.pint-check.outputs.status }}" = "failure" ]; then
            echo "### 🎨 Corrections Laravel Pint" >> "$REPORT_FILE"
            echo "- Exécutez \`./vendor/bin/pint\` pour corriger automatiquement les problèmes de style" >> "$REPORT_FILE"
            echo "- Vérifiez la configuration dans \`pint.json\`" >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
          fi

          if [ "${{ steps.phpstan-check.outputs.status }}" = "failure" ]; then
            echo "### 🔍 Corrections PHPStan" >> "$REPORT_FILE"
            echo "- Corrigez les erreurs d'analyse statique détectées" >> "$REPORT_FILE"
            echo "- Ajoutez les annotations de type manquantes" >> "$REPORT_FILE"
            echo "- Vérifiez la configuration dans \`phpstan.neon.dist\`" >> "$REPORT_FILE"
            echo "" >> "$REPORT_FILE"
          fi

          echo "report-path=$REPORT_FILE" >> $GITHUB_OUTPUT

          echo "📄 Rapport généré: $REPORT_FILE"
          cat "$REPORT_FILE"

      - name: Upload Quality Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report-${{ github.run_number }}
          path: reports/code-quality/
          retention-days: 30

      - name: Create Issue on Failure
        if: failure() && (steps.pint-check.outputs.status == 'failure' || steps.phpstan-check.outputs.status == 'failure')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Lire le rapport généré
            const reportPath = '${{ steps.generate-report.outputs.report-path }}';
            let reportContent = '';

            try {
              reportContent = fs.readFileSync(reportPath, 'utf8');
            } catch (error) {
              reportContent = `Erreur lors de la lecture du rapport: ${error.message}`;
            }

            // Déterminer les labels basés sur les échecs
            const labels = ['ci-failure', 'code-quality'];
            if ('${{ steps.pint-check.outputs.status }}' === 'failure') {
              labels.push('code-style');
            }
            if ('${{ steps.phpstan-check.outputs.status }}' === 'failure') {
              labels.push('static-analysis');
            }

            // Créer le ticket
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Échec de la qualité du code - ${context.payload.head_commit?.message || 'Commit ' + context.sha.substring(0, 7)}`,
              body: `## 🚨 Échec de la Qualité du Code

            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            **Commit:** ${context.sha}
            **Branche:** ${context.ref.replace('refs/heads/', '')}
            **Auteur:** @${context.actor}

            ### 📊 Détails des Échecs

            | Outil | Statut |
            |-------|--------|
            | Laravel Pint | ${{ steps.pint-check.outputs.status }} |
            | PHPStan | ${{ steps.phpstan-check.outputs.status }} |

            ### 📋 Rapport Complet

            ${reportContent}

            ### 🔗 Liens Utiles

            - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [Commit](${context.payload.repository.html_url}/commit/${context.sha})

            ### ✅ Critères d'Acceptation

            - [ ] Corriger tous les problèmes de style Laravel Pint
            - [ ] Résoudre toutes les erreurs PHPStan
            - [ ] Vérifier que les tests passent
            - [ ] Mettre à jour la documentation si nécessaire

            ---

            *Ce ticket a été créé automatiquement par le workflow CI/CD.*`,
              labels: labels,
              assignees: [context.actor]
            });

            console.log(`Ticket créé: ${issue.data.html_url}`);

            // Ajouter un commentaire avec des détails supplémentaires
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              body: `### 🔧 Guide de Résolution Rapide

            #### Pour Laravel Pint:
            \`\`\`bash
            # Corriger automatiquement les problèmes de style
            ./vendor/bin/pint

            # Vérifier les corrections
            ./vendor/bin/pint --test
            \`\`\`

            #### Pour PHPStan:
            \`\`\`bash
            # Analyser le code
            ./vendor/bin/phpstan analyse --memory-limit=2G

            # Générer un baseline (si nécessaire)
            ./vendor/bin/phpstan analyse --generate-baseline
            \`\`\`

            #### Commandes utiles:
            \`\`\`bash
            # Exécuter tous les outils de qualité
            composer lint
            composer test:lint

            # Tests complets
            php artisan test
            \`\`\`

            @${context.actor} Merci de corriger ces problèmes avant de merger.`
            });

      - name: Fail job if quality checks failed
        if: steps.pint-check.outputs.status == 'failure' || steps.phpstan-check.outputs.status == 'failure'
        run: |
          echo "❌ Échec des vérifications de qualité du code"
          echo "📊 Laravel Pint: ${{ steps.pint-check.outputs.status }}"
          echo "🔍 PHPStan: ${{ steps.phpstan-check.outputs.status }}"
          echo ""
          echo "📄 Consultez le rapport détaillé dans les artifacts"
          echo "🎫 Un ticket a été créé automatiquement pour le suivi"
          exit 1
