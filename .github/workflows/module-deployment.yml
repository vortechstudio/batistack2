name: üöÄ D√©ploiement Module

on:
  push:
    branches: [master, production]
    paths:
      # Modules existants
      - 'app/Models/Chantiers/**'
      - 'app/Models/RH/**'
      - 'app/Models/Tiers/**'
      - 'app/Models/Commerce/**'
      - 'app/Models/Core/**'
      # Modules futurs (patterns g√©n√©riques)
      - 'app/Models/**'
      - 'app/Livewire/**'
      - 'app/Http/Controllers/**'
      - 'app/Services/**'
      - 'app/Actions/**'
      - 'app/Jobs/**'
      - 'app/Events/**'
      - 'app/Mail/**'
      - 'app/Notifications/**'
      - 'app/Enums/**'
      # Base de donn√©es
      - 'database/migrations/**'
      - 'database/factories/**'
      - 'database/seeders/**'
      # Frontend
      - 'resources/views/**'
      - 'resources/js/**'
      - 'resources/css/**'
      # Configuration
      - 'config/**'
      - 'routes/**'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de d√©ploiement'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      modules:
        description: 'Modules √† d√©ployer (s√©par√©s par des virgules, ou "all" pour tous)'
        required: false
        default: 'auto'
        type: string

env:
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  detect-changes:
    name: üîç D√©tection des Changements
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.detect.outputs.modules }}
      has-migrations: ${{ steps.detect.outputs.has-migrations }}
      has-frontend: ${{ steps.detect.outputs.has-frontend }}
      has-config: ${{ steps.detect.outputs.has-config }}
      deploy-staging: ${{ steps.detect.outputs.deploy-staging }}
      deploy-production: ${{ steps.detect.outputs.deploy-production }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: D√©tecter les modules modifi√©s
        id: detect
        run: |
          echo "üîç D√©tection des changements..."

          # D√©tection des modules modifi√©s
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          MODULES=()
          HAS_MIGRATIONS=false
          HAS_FRONTEND=false
          HAS_CONFIG=false

          # Analyse des fichiers modifi√©s
          while IFS= read -r file; do
            echo "üìÅ Fichier modifi√©: $file"

            # D√©tection des modules
            if [[ $file =~ ^app/Models/([^/]+)/ ]]; then
              MODULE="${BASH_REMATCH[1]}"
              if [[ ! " ${MODULES[@]} " =~ " ${MODULE} " ]]; then
                MODULES+=("$MODULE")
              fi
            elif [[ $file =~ ^app/Livewire/([^/]+)/ ]]; then
              MODULE="${BASH_REMATCH[1]}"
              if [[ ! " ${MODULES[@]} " =~ " ${MODULE} " ]]; then
                MODULES+=("$MODULE")
              fi
            elif [[ $file =~ ^app/(Actions|Services|Jobs|Events|Mail|Notifications|Enums)/([^/]+)/ ]]; then
              MODULE="${BASH_REMATCH[2]}"
              if [[ ! " ${MODULES[@]} " =~ " ${MODULE} " ]]; then
                MODULES+=("$MODULE")
              fi
            fi

            # D√©tection des types de changements
            if [[ $file =~ ^database/migrations/ ]]; then
              HAS_MIGRATIONS=true
            elif [[ $file =~ ^resources/(views|js|css)/ ]]; then
              HAS_FRONTEND=true
            elif [[ $file =~ ^(config|routes)/ ]]; then
              HAS_CONFIG=true
            fi
          done <<< "$CHANGED_FILES"

          # Gestion du d√©clenchement manuel
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.modules }}" == "all" ]]; then
              MODULES=("Chantiers" "RH" "Tiers" "Commerce" "Core")
            elif [[ "${{ github.event.inputs.modules }}" != "auto" ]]; then
              IFS=',' read -ra MODULES <<< "${{ github.event.inputs.modules }}"
            fi
          fi

          # Conversion en JSON
          MODULES_JSON=$(printf '%s\n' "${MODULES[@]}" | jq -R . | jq -s .)

          echo "modules=$MODULES_JSON" >> $GITHUB_OUTPUT
          echo "has-migrations=$HAS_MIGRATIONS" >> $GITHUB_OUTPUT
          echo "has-frontend=$HAS_FRONTEND" >> $GITHUB_OUTPUT
          echo "has-config=$HAS_CONFIG" >> $GITHUB_OUTPUT

          # D√©terminer les environnements de d√©ploiement
          if [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "deploy-staging=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-staging=false" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ github.ref }}" == "refs/heads/production" ]] || [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "deploy-production=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-production=false" >> $GITHUB_OUTPUT
          fi

          echo "üìä Modules d√©tect√©s: ${MODULES[*]}"
          echo "üóÑÔ∏è Migrations: $HAS_MIGRATIONS"
          echo "üé® Frontend: $HAS_FRONTEND"
          echo "‚öôÔ∏è Config: $HAS_CONFIG"

  deploy-staging:
    name: üì¶ D√©ploiement Staging
    runs-on: ubuntu-latest
    environment: staging
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy-staging == 'true' && needs.detect-changes.outputs.modules != '[]'

    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Pr√©parer l'environnement
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Ex√©cuter les migrations
        if: needs.detect-changes.outputs.has-migrations == 'true'
        run: |
          echo "üóÑÔ∏è Ex√©cution des migrations pour le module ${{ matrix.module }}"
          php artisan migrate --force

      - name: Compiler les assets
        if: needs.detect-changes.outputs.has-frontend == 'true'
        run: |
          echo "üé® Compilation des assets frontend"
          npm ci
          npm run build

      - name: D√©ployer le module ${{ matrix.module }}
        run: |
          echo "üöÄ D√©ploiement du module ${{ matrix.module }} sur staging"

          # Vider les caches
          php artisan cache:clear
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear

          # Optimiser pour la production
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          # Publier les assets si n√©cessaire
          php artisan vendor:publish --tag=public --force

          # Red√©marrer les queues si elles existent
          php artisan queue:restart || true

      - name: Tests de fum√©e
        run: |
          echo "üß™ Tests de fum√©e pour le module ${{ matrix.module }}"

          # Tests basiques de l'application
          php artisan test --testsuite=Feature --stop-on-failure

          # V√©rifier que l'application r√©pond
          php artisan route:list | grep -i ${{ matrix.module }} || echo "Aucune route sp√©cifique au module trouv√©e"

      - name: V√©rification de sant√©
        run: |
          echo "‚ù§Ô∏è V√©rification de sant√© du module ${{ matrix.module }}"

          # V√©rifier la connectivit√© √† la base de donn√©es
          php artisan migrate:status

          # V√©rifier les services essentiels
          php artisan about --only=environment,cache,database

          # Test de sant√© personnalis√© si disponible
          php artisan health:check || echo "Commande health:check non disponible"
          # Tests basiques post-d√©ploiement
          # php artisan test --filter=${{ matrix.module }}

      - name: V√©rification de sant√©
        run: |
          echo "‚ù§Ô∏è V√©rification de sant√© du module ${{ matrix.module }}"
          # V√©rifications de sant√© sp√©cifiques
          # curl -f http://staging.example.com/health/${{ matrix.module }}

  notify-staging:
    name: üì¢ Notification Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-staging]
    if: always() && needs.detect-changes.outputs.deploy-staging == 'true'

    steps:
      - name: Notifier l'√©quipe
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            ${{ needs.deploy-staging.result == 'success' && '‚úÖ' || '‚ùå' }} D√©ploiement Staging

            **Modules:** ${{ join(fromJson(needs.detect-changes.outputs.modules), ', ') }}
            **Migrations:** ${{ needs.detect-changes.outputs.has-migrations == 'true' && '‚úÖ' || '‚ùå' }}
            **Frontend:** ${{ needs.detect-changes.outputs.has-frontend == 'true' && '‚úÖ' || '‚ùå' }}
            **Config:** ${{ needs.detect-changes.outputs.has-config == 'true' && '‚úÖ' || '‚ùå' }}

            ${{ needs.deploy-staging.result == 'success' && 'Pr√™t pour validation et d√©ploiement production' || '√âchec du d√©ploiement - V√©rification requise' }}

  deploy-production:
    name: üè≠ D√©ploiement Production
    runs-on: ubuntu-latest
    environment: production
    needs: [detect-changes, deploy-staging]
    if: |
      needs.detect-changes.outputs.deploy-production == 'true' &&
      needs.detect-changes.outputs.modules != '[]' &&
      (needs.deploy-staging.result == 'success' || needs.detect-changes.outputs.deploy-staging == 'false')

    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.modules) }}
      fail-fast: true

    steps:
      - name: Approbation manuelle requise
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: vortechstudio
          minimum-approvals: 1
          issue-title: "üè≠ D√©ploiement Production - Module ${{ matrix.module }}"
          issue-body: |
            ## üöÄ Demande de d√©ploiement en production

            **Module:** ${{ matrix.module }}
            **Commit:** ${{ github.sha }}
            **Auteur:** ${{ github.actor }}

            ### Changements d√©tect√©s:
            - **Migrations:** ${{ needs.detect-changes.outputs.has-migrations == 'true' && '‚úÖ Oui' || '‚ùå Non' }}
            - **Frontend:** ${{ needs.detect-changes.outputs.has-frontend == 'true' && '‚úÖ Oui' || '‚ùå Non' }}
            - **Configuration:** ${{ needs.detect-changes.outputs.has-config == 'true' && '‚úÖ Oui' || '‚ùå Non' }}

            ### V√©rifications pr√©-d√©ploiement:
            - [ ] Tests de staging valid√©s
            - [ ] Documentation mise √† jour
            - [ ] √âquipe notifi√©e
            - [ ] Backup effectu√©

            **Approuvez ce d√©ploiement pour continuer.**

      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      - name: Backup avant d√©ploiement
        run: |
          echo "üíæ Backup de la base de donn√©es avant d√©ploiement"
          # Commandes de backup

      - name: D√©ployer en production
        run: |
          echo "üè≠ D√©ploiement du module ${{ matrix.module }} en production"

          # Mode maintenance
          php artisan down --message="D√©ploiement en cours..." --retry=60

          # Vider tous les caches
          php artisan cache:clear
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          php artisan event:clear

          # Optimisations production
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan event:cache

          # Optimiser l'autoloader Composer
          composer dump-autoload --optimize

          # Publier les assets
          php artisan vendor:publish --tag=public --force

          # Red√©marrer les services
          php artisan queue:restart || true
          php artisan schedule:clear-cache || true

          # Sortir du mode maintenance
          php artisan up

      - name: Tests post-d√©ploiement
        run: |
          echo "üß™ Tests post-d√©ploiement en production"

          # Tests critiques uniquement
          php artisan test --testsuite=Feature --group=critical --stop-on-failure || true

          # V√©rifier les routes principales
          php artisan route:list --compact

      - name: V√©rification finale
        run: |
          echo "‚úÖ V√©rification finale du d√©ploiement"

          # Statut des migrations
          php artisan migrate:status

          # Informations syst√®me
          php artisan about --only=environment,cache,database

          # V√©rifier les permissions de stockage
          php artisan storage:link || echo "Storage link d√©j√† cr√©√©"

          # Test de sant√© final
          php artisan inspire # Commande simple pour v√©rifier que Laravel fonctionne

  notify-production:
    name: üì¢ Notification Production
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-production]
    if: always() && needs.detect-changes.outputs.deploy-production == 'true'

    steps:
      - name: Notifier l'√©quipe
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            ${{ needs.deploy-production.result == 'success' && 'üéâ' || 'üö®' }} D√©ploiement Production

            **Modules:** ${{ join(fromJson(needs.detect-changes.outputs.modules), ', ') }}
            **Statut:** ${{ needs.deploy-production.result == 'success' && 'Succ√®s' || '√âchec' }}
            **Commit:** ${{ github.sha }}
            **Auteur:** ${{ github.actor }}

            ${{ needs.deploy-production.result == 'success' && '‚úÖ D√©ploiement termin√© avec succ√®s' || '‚ùå √âchec du d√©ploiement - Intervention requise' }}
