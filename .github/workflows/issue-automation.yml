name: üéØ Automatisation des Issues

on:
  issues:
    types: [opened, labeled, assigned]
  pull_request:
    types: [opened, ready_for_review]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  auto-assign-module:
    name: üìã Attribution automatique par module
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'

    steps:
      - name: Auto-assign based on module label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const moduleAssignments = {
              'module:chantiers': ['@batistack/team-chantiers'],
              'module:rh': ['@batistack/team-rh'],
              'module:commerce': ['@batistack/team-commerce'],
              'module:tiers': ['@batistack/team-tiers'],
              'module:infrastructure': ['@batistack/team-infra'],
              'module:produits-services': ['@batistack/team-commerce'],
              'module:gpao': ['@batistack/team-production'],
              'module:facturation': ['@batistack/team-finance'],
              'transversal:infra': ['@batistack/devops'],
              'transversal:ux': ['@batistack/designers']
            };

            const labels = context.payload.issue.labels.map(l => l.name);
            console.log('Labels d√©tect√©s:', labels);

            for (const [label, teams] of Object.entries(moduleAssignments)) {
              if (labels.includes(label)) {
                console.log(`Attribution pour le label ${label}:`, teams);

                // Ajouter un commentaire mentionnant l'√©quipe
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number,
                  body: `üéØ **Attribution automatique**\n\nCette issue a √©t√© assign√©e √† l'√©quipe ${teams.join(', ')} bas√©e sur le label \`${label}\`.`
                });
                break;
              }
            }

  estimate-complexity:
    name: üéØ Estimation automatique de complexit√©
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'

    steps:
      - name: Add complexity labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = (context.payload.issue.body || '').toLowerCase();
            const title = context.payload.issue.title.toLowerCase();

            let complexity = 'complexity:medium';
            let reasoning = '';

            // Haute complexit√©
            const highComplexityKeywords = ['migration', 'api', 'integration', 'architecture', 'base de donn√©es', 's√©curit√©', 'refactoring', 'performance'];
            if (highComplexityKeywords.some(keyword => body.includes(keyword) || title.includes(keyword))) {
              complexity = 'complexity:high';
              reasoning = 'Mots-cl√©s d√©tect√©s: architecture/migration/API/s√©curit√©';
            }

            // Faible complexit√©
            const lowComplexityKeywords = ['documentation', 'css', 'fix', 'typo', 'traduction', 'style', 'texte', 'libell√©'];
            if (lowComplexityKeywords.some(keyword => body.includes(keyword) || title.includes(keyword))) {
              complexity = 'complexity:low';
              reasoning = 'Mots-cl√©s d√©tect√©s: documentation/style/typo';
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: [complexity]
            });

            // Ajouter un commentaire explicatif
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `üéØ **Estimation de complexit√©**: \`${complexity}\`\n\n${reasoning ? `Raison: ${reasoning}` : 'Estimation bas√©e sur l\'analyse du contenu'}`
            });

  auto-priority:
    name: üö® Attribution automatique de priorit√©
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'

    steps:
      - name: Add priority labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = (context.payload.issue.body || '').toLowerCase();
            const title = context.payload.issue.title.toLowerCase();
            const labels = context.payload.issue.labels.map(l => l.name);

            let priority = 'priorite:moyenne';
            let reasoning = 'Priorit√© par d√©faut';

            // Priorit√© haute
            if (labels.includes('Bug') && (body.includes('critique') || body.includes('bloque') || body.includes('production') || title.includes('urgent'))) {
              priority = 'priorite:haute';
              reasoning = 'Bug critique affectant la production';
            } else if (labels.includes('enhancement') && (body.includes('client') || body.includes('urgent') || title.includes('important'))) {
              priority = 'priorite:haute';
              reasoning = 'Fonctionnalit√© importante pour les clients';
            }

            // Priorit√© basse
            if (body.includes('documentation') || title.includes('typo') || title.includes('style') || labels.includes('good first issue')) {
              priority = 'priorite:basse';
              reasoning = 'Am√©lioration mineure ou documentation';
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: [priority]
            });

            // Ajouter un commentaire explicatif
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `üö® **Priorit√© assign√©e**: \`${priority}\`\n\nRaison: ${reasoning}`
            });
