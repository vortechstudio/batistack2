name: üîí Security Deep Scan

on:
  push:
    branches: [ develop, master, production ]
  pull_request:
    branches: [ master, production ]
    types: [ opened, synchronize, reopened ]
  schedule:
    - cron: '0 3 * * *' # Scan quotidien √† 3h
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type de scan de s√©curit√©'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - secrets-only
          - dependencies-only
          - vulnerabilities-only
      create_issue:
        description: 'Cr√©er une issue en cas de vuln√©rabilit√© critique'
        required: false
        default: 'true'
        type: boolean

permissions:
  issues: write
  pull-requests: write
  contents: write

env:
  PHP_VERSION: '8.3'

jobs:
  security-deep-scan:
    name: üîí Analyse de s√©curit√© approfondie
    runs-on: ubuntu-latest
    outputs:
      critical-vulnerabilities: ${{ steps.vulnerability-check.outputs.critical-count }}
      secrets-found: ${{ steps.secrets-scan.outputs.secrets-count }}
      security-status: ${{ steps.security-summary.outputs.status }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Historique complet pour l'analyse des secrets

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick

      - name: üì¶ Install dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: üìÅ Create security reports directory
        run: mkdir -p reports/security

      - name: üõ°Ô∏è Advanced secrets detection
        id: secrets-scan
        continue-on-error: true
        if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets-only' || github.event.inputs.scan_type == ''
        run: |
          echo "üîç Recherche avanc√©e de secrets..."

          # Scan avec TruffleHog (plus approfondi que module-ci.yml)
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest filesystem /pwd \
            --json --no-update > reports/security/trufflehog-detailed.json || true

          # Analyse personnalis√©e pour les patterns Laravel sp√©cifiques
          echo "üîç Recherche de patterns Laravel sensibles..."

          # Recherche de cl√©s API, tokens, mots de passe en dur
          grep -r -n -E "(api_key|secret_key|password|token|private_key)" \
            --include="*.php" --include="*.env*" --include="*.json" \
            app/ config/ database/ routes/ > reports/security/sensitive-patterns.txt || true

          # V√©rification des fichiers .env
          find . -name ".env*" -not -name ".env.example" -not -name ".env.github" \
            -exec echo "‚ö†Ô∏è Fichier .env d√©tect√©: {}" \; > reports/security/env-files.txt || true

          # Compter les secrets trouv√©s
          SECRETS_COUNT=$(wc -l < reports/security/sensitive-patterns.txt || echo "0")
          echo "secrets-count=$SECRETS_COUNT" >> $GITHUB_OUTPUT

          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è $SECRETS_COUNT patterns sensibles d√©tect√©s"
          else
            echo "‚úÖ Aucun pattern sensible d√©tect√©"
          fi

      - name: üîç Vulnerability assessment
        id: vulnerability-check
        continue-on-error: true
        if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'vulnerabilities-only' || github.event.inputs.scan_type == ''
        run: |
          echo "üîç √âvaluation des vuln√©rabilit√©s..."

          # Audit Composer avec d√©tails
          composer audit --format=json > reports/security/composer-audit.json || true

          # Analyse des permissions de fichiers sensibles
          echo "üîí V√©rification des permissions de fichiers..."
          find storage/ -type f -name "*.log" -exec ls -la {} \; > reports/security/file-permissions.txt || true
          find . -name "*.env*" -exec ls -la {} \; >> reports/security/file-permissions.txt || true

          # V√©rification de la configuration de s√©curit√© Laravel
          echo "üõ°Ô∏è V√©rification de la configuration de s√©curit√© Laravel..."
          php artisan config:show app.debug > reports/security/laravel-config.txt || echo "Debug mode check failed"

          # Compter les vuln√©rabilit√©s critiques
          CRITICAL_COUNT=$(jq '[.[] | select(.severity == "high" or .severity == "critical")] | length' reports/security/composer-audit.json 2>/dev/null || echo "0")
          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT

          echo "üîç Vuln√©rabilit√©s critiques trouv√©es: $CRITICAL_COUNT"

      - name: üîí Advanced SARIF security analysis
        continue-on-error: true
        if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'vulnerabilities-only' || github.event.inputs.scan_type == ''
        run: |
          echo "üîí Analyse SARIF avanc√©e..."

          # Installation de outils de s√©curit√© suppl√©mentaires
          composer require --dev vimeo/psalm || true

          # Analyse Psalm pour la s√©curit√©
          ./vendor/bin/psalm --output-format=json > reports/security/psalm-security.json || true

          # V√©rification des en-t√™tes de s√©curit√© dans les r√©ponses
          echo "üõ°Ô∏è V√©rification de la configuration de s√©curit√© web..."
          grep -r "X-Frame-Options\|Content-Security-Policy\|X-XSS-Protection" config/ > reports/security/security-headers.txt || true

      - name: üìä Security summary
        id: security-summary
        run: |
          echo "üìä G√©n√©ration du r√©sum√© de s√©curit√©..."

          CRITICAL_VULNS="${{ steps.vulnerability-check.outputs.critical-count || '0' }}"
          SECRETS_FOUND="${{ steps.secrets-scan.outputs.secrets-count || '0' }}"

          # D√©terminer le statut global
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$SECRETS_FOUND" -gt 0 ]; then
            SECURITY_STATUS="failed"
            echo "‚ùå Probl√®mes de s√©curit√© d√©tect√©s"
          else
            SECURITY_STATUS="success"
            echo "‚úÖ Aucun probl√®me de s√©curit√© critique d√©tect√©"
          fi

          echo "status=$SECURITY_STATUS" >> $GITHUB_OUTPUT

          # Cr√©er un rapport de s√©curit√© d√©taill√©
          cat > reports/security/security-summary.md << EOF
          # üîí Rapport de S√©curit√© - $(date)

          ## üéØ Statut Global: $([ "$SECURITY_STATUS" = "success" ] && echo "‚úÖ S√âCURIS√â" || echo "‚ùå VULN√âRABILIT√âS D√âTECT√âES")

          ## üìä R√©sum√© des Analyses
          - **Vuln√©rabilit√©s critiques**: $CRITICAL_VULNS
          - **Secrets d√©tect√©s**: $SECRETS_FOUND
          - **Branche analys√©e**: ${{ github.ref_name }}
          - **Type de scan**: ${{ github.event.inputs.scan_type || 'full' }}

          ## üîç D√©tails des Analyses
          ### üõ°Ô∏è D√©tection de Secrets
          - Scan TruffleHog approfondi avec historique complet
          - Recherche de patterns Laravel sp√©cifiques
          - V√©rification des fichiers .env

          ### üîç √âvaluation des Vuln√©rabilit√©s
          - Audit Composer avec classification par s√©v√©rit√©
          - V√©rification des permissions de fichiers
          - Analyse de la configuration Laravel

          ### üîí Analyse SARIF
          - Scan Psalm pour la s√©curit√© du code
          - V√©rification des en-t√™tes de s√©curit√© web
          EOF

          # Rapport des probl√®mes critiques d√©tect√©s (non-bloquant)
          if [ "$SECURITY_STATUS" = "failed" ]; then
            echo "üö´ Scan de s√©curit√© - Vuln√©rabilit√©s critiques d√©tect√©es (non-bloquant)"
            echo "‚ö†Ô∏è Le workflow continue pour g√©n√©rer les rapports complets"
          fi

      - name: üì§ Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-deep-scan-${{ github.sha }}
          path: reports/security/
          retention-days: 90 # Conserver plus longtemps pour la s√©curit√©

  dependency-check:
    name: üîç Analyse OWASP des d√©pendances
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies-only' || github.event.inputs.scan_type == ''
    outputs:
      dependency-vulnerabilities: ${{ steps.dependency-analysis.outputs.vuln-count }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

      - name: üì¶ Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install Node.js dependencies
        run: |
          echo "üì¶ Installation des d√©pendances Node.js..."
          npm ci --prefer-offline --no-audit
          echo "‚úÖ D√©pendances Node.js install√©es"

      - name: üìÅ Create dependency reports directory
        run: mkdir -p reports/dependencies

      - name: üîç Validate suppression file
        run: |
          echo "üîç Validation du fichier de suppression..."
          if [ -f "dependency-check-suppressions.xml" ]; then
            echo "‚úÖ Fichier de suppression trouv√©"
            # V√©rifier la syntaxe XML
            xmllint --noout dependency-check-suppressions.xml && echo "‚úÖ Syntaxe XML valide" || echo "‚ö†Ô∏è Probl√®me de syntaxe XML"
          else
            echo "‚ö†Ô∏è Fichier de suppression non trouv√© - cr√©ation d'un fichier minimal"
            cat > dependency-check-suppressions.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
          </suppressions>
          EOF
          fi

      - name: üîç OWASP Dependency Check
        continue-on-error: true
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Batistack'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --out reports/dependencies/
            --suppression dependency-check-suppressions.xml
            --exclude "**/node_modules/**"
            --exclude "**/vendor/**"
            --exclude "**/storage/**"
            --exclude "**/bootstrap/cache/**"

      - name: üìä Analyze dependency results
        id: dependency-analysis
        run: |
          echo "üìä Analyse des r√©sultats de d√©pendances..."

          # V√©rifier quels rapports ont √©t√© g√©n√©r√©s
          echo "üîç V√©rification des rapports g√©n√©r√©s..."
          ls -la reports/dependencies/ || echo "Aucun rapport trouv√©"

          # Compter les vuln√©rabilit√©s dans le rapport JSON
          VULN_COUNT=0
          HIGH_VULN_COUNT=0
          CRITICAL_VULN_COUNT=0

          if [ -f "reports/dependencies/dependency-check-report.json" ]; then
            echo "‚úÖ Rapport JSON trouv√© - analyse en cours..."

            # Compter toutes les vuln√©rabilit√©s
            VULN_COUNT=$(jq '[.dependencies[]?.vulnerabilities[]?] | length' reports/dependencies/dependency-check-report.json 2>/dev/null || echo "0")

            # Compter les vuln√©rabilit√©s critiques et √©lev√©es
            HIGH_VULN_COUNT=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH")] | length' reports/dependencies/dependency-check-report.json 2>/dev/null || echo "0")
            CRITICAL_VULN_COUNT=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL")] | length' reports/dependencies/dependency-check-report.json 2>/dev/null || echo "0")

            echo "üìä Analyse d√©taill√©e des vuln√©rabilit√©s:"
            echo "  - Total: $VULN_COUNT"
            echo "  - Critiques: $CRITICAL_VULN_COUNT"
            echo "  - √âlev√©es: $HIGH_VULN_COUNT"
          else
            echo "‚ö†Ô∏è Rapport JSON non trouv√© - v√©rification des autres formats..."

            # Essayer de lire le rapport XML si disponible
            if [ -f "reports/dependencies/dependency-check-report.xml" ]; then
              echo "‚úÖ Rapport XML trouv√©"
              VULN_COUNT=$(xmllint --xpath "count(//vulnerability)" reports/dependencies/dependency-check-report.xml 2>/dev/null || echo "0")
            fi
          fi

          echo "vuln-count=$VULN_COUNT" >> $GITHUB_OUTPUT
          echo "high-vuln-count=$HIGH_VULN_COUNT" >> $GITHUB_OUTPUT
          echo "critical-vuln-count=$CRITICAL_VULN_COUNT" >> $GITHUB_OUTPUT

          echo "üîç R√©sum√© des vuln√©rabilit√©s de d√©pendances:"
          echo "  - Total: $VULN_COUNT"
          echo "  - Critiques: $CRITICAL_VULN_COUNT"
          echo "  - √âlev√©es: $HIGH_VULN_COUNT"

          # Cr√©er un r√©sum√© d√©taill√© des d√©pendances
          cat > reports/dependencies/dependency-summary.md << EOF
          # üîç Rapport d'Analyse des D√©pendances - $(date)

          ## üìä R√©sum√© OWASP Dependency Check
          - **Vuln√©rabilit√©s totales**: $VULN_COUNT
          - **Vuln√©rabilit√©s critiques**: $CRITICAL_VULN_COUNT
          - **Vuln√©rabilit√©s √©lev√©es**: $HIGH_VULN_COUNT
          - **Projet**: Batistack
          - **Branche**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}

          ## üéØ Statut de S√©curit√©
          $(if [ "$CRITICAL_VULN_COUNT" -gt 0 ]; then
            echo "üî¥ **CRITIQUE** - Vuln√©rabilit√©s critiques d√©tect√©es"
          elif [ "$HIGH_VULN_COUNT" -gt 0 ]; then
            echo "üü° **ATTENTION** - Vuln√©rabilit√©s √©lev√©es d√©tect√©es"
          elif [ "$VULN_COUNT" -gt 0 ]; then
            echo "üü¢ **ACCEPTABLE** - Vuln√©rabilit√©s mineures d√©tect√©es"
          else
            echo "‚úÖ **S√âCURIS√â** - Aucune vuln√©rabilit√© d√©tect√©e"
          fi)

          ## üîó Rapports G√©n√©r√©s
          $(ls -la reports/dependencies/ | grep -E '\.(html|json|xml|csv)$' | awk '{print "- " $9}' || echo "- Aucun rapport disponible")

          ## üìã Actions Recommand√©es
          $(if [ "$CRITICAL_VULN_COUNT" -gt 0 ]; then
            echo "- üö® **URGENT**: Corriger imm√©diatement les vuln√©rabilit√©s critiques"
            echo "- üì¶ Mettre √† jour les d√©pendances vuln√©rables"
            echo "- üîç V√©rifier les alternatives s√©curis√©es"
          elif [ "$HIGH_VULN_COUNT" -gt 0 ]; then
            echo "- ‚ö†Ô∏è Planifier la correction des vuln√©rabilit√©s √©lev√©es"
            echo "- üì¶ Mettre √† jour les d√©pendances concern√©es"
          elif [ "$VULN_COUNT" -gt 0 ]; then
            echo "- üìù √âvaluer l'impact des vuln√©rabilit√©s mineures"
            echo "- üìÖ Planifier les mises √† jour lors du prochain cycle"
          else
            echo "- ‚úÖ Continuer la surveillance r√©guli√®re"
            echo "- üìÖ Maintenir les d√©pendances √† jour"
          fi)
          EOF

          # Afficher un r√©sum√© dans les logs
          if [ "$CRITICAL_VULN_COUNT" -gt 0 ]; then
            echo "üö® ALERTE CRITIQUE: $CRITICAL_VULN_COUNT vuln√©rabilit√©s critiques d√©tect√©es!"
          elif [ "$HIGH_VULN_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è ATTENTION: $HIGH_VULN_COUNT vuln√©rabilit√©s √©lev√©es d√©tect√©es"
          elif [ "$VULN_COUNT" -gt 0 ]; then
            echo "‚ÑπÔ∏è INFO: $VULN_COUNT vuln√©rabilit√©s mineures d√©tect√©es"
          else
            echo "‚úÖ SUCC√àS: Aucune vuln√©rabilit√© d√©tect√©e"
          fi

      - name: üì§ Upload dependency reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-${{ github.sha }}
          path: reports/dependencies/
          retention-days: 60

  security-notifications:
    name: üö® Notifications de S√©curit√©
    runs-on: ubuntu-latest
    needs: [security-deep-scan, dependency-check]
    if: always()
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üö® Create critical security issue
        if: (needs.security-deep-scan.outputs.critical-vulnerabilities > 0 || needs.dependency-check.outputs.critical-vuln-count > 0 || needs.security-deep-scan.outputs.secrets-found > 0) && (github.event.inputs.create_issue == 'true' || github.event.inputs.create_issue == '')
        uses: actions/github-script@v7
        with:
          script: |
            const criticalVulns = '${{ needs.security-deep-scan.outputs.critical-vulnerabilities || 0 }}';
            const dependencyVulns = '${{ needs.dependency-check.outputs.dependency-vulnerabilities || 0 }}';
            const criticalDepVulns = '${{ needs.dependency-check.outputs.critical-vuln-count || 0 }}';
            const highDepVulns = '${{ needs.dependency-check.outputs.high-vuln-count || 0 }}';
            const secretsFound = '${{ needs.security-deep-scan.outputs.secrets-found || 0 }}';

            // D√©terminer le niveau de criticit√©
            const isCritical = parseInt(criticalVulns) > 0 || parseInt(criticalDepVulns) > 0 || parseInt(secretsFound) > 0;
            const isHigh = parseInt(highDepVulns) > 0;

            const severity = isCritical ? 'CRITIQUE' : (isHigh ? '√âLEV√âE' : 'MOD√âR√âE');
            const emoji = isCritical ? 'üö®' : (isHigh ? '‚ö†Ô∏è' : '‚ÑπÔ∏è');

            const title = `${emoji} ALERTE S√âCURIT√â ${severity} - ${new Date().toISOString().split('T')[0]}`;
            const body = `## ${emoji} Vuln√©rabilit√©s ${severity} D√©tect√©es

            Le scan de s√©curit√© approfondi a d√©tect√© des vuln√©rabilit√©s sur la branche \`${{ github.ref_name }}\`.

            ### üìä R√©sum√© D√©taill√© des Menaces
            - **üî¥ Vuln√©rabilit√©s critiques (code)**: ${criticalVulns}
            - **üî¥ Vuln√©rabilit√©s critiques (d√©pendances)**: ${criticalDepVulns}
            - **üü° Vuln√©rabilit√©s √©lev√©es (d√©pendances)**: ${highDepVulns}
            - **üì¶ Total vuln√©rabilit√©s de d√©pendances**: ${dependencyVulns}
            - **üîë Secrets/Credentials d√©tect√©s**: ${secretsFound}

            ### ${isCritical ? 'üö® ACTIONS URGENTES REQUISES' : 'üìã ACTIONS RECOMMAND√âES'}
            ${isCritical ? `
            - [ ] **PRIORIT√â 1**: Corriger imm√©diatement les vuln√©rabilit√©s critiques
            - [ ] **PRIORIT√â 2**: Supprimer/s√©curiser les secrets d√©tect√©s
            - [ ] **PRIORIT√â 3**: Mettre √† jour les d√©pendances critiques
            - [ ] **PRIORIT√â 4**: Relancer le scan apr√®s corrections
            ` : `
            - [ ] √âvaluer l'impact des vuln√©rabilit√©s d√©tect√©es
            - [ ] Planifier les mises √† jour de d√©pendances
            - [ ] Programmer les corrections dans le prochain sprint
            - [ ] Surveiller les nouvelles vuln√©rabilit√©s
            `}

            ### üîó Ressources et Rapports
            - [üîó Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [üìù Commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            - [üìä Rapports de s√©curit√© d√©taill√©s](artifacts)
            - [üìã Branche analys√©e](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})

            ### üìã D√©tails Techniques
            - **Type de scan**: ${{ github.event.inputs.scan_type || 'full' }}
            - **D√©clencheur**: ${{ github.event_name }}
            - **Environnement**: ${{ github.ref_name }}
            - **SHA**: \`${{ github.sha }}\`

            ### ‚ö†Ô∏è CONFIDENTIALIT√â
            **Cette issue contient des informations sensibles de s√©curit√©.**
            - Ne pas partager publiquement les d√©tails des vuln√©rabilit√©s
            - Limiter l'acc√®s aux personnes autoris√©es
            - Traiter avec la plus haute confidentialit√©

            ---
            *Issue cr√©√©e automatiquement par le Security Deep Scan v2.0*
            *Derni√®re mise √† jour: ${new Date().toISOString()}*`;

            const labels = ['security', 'vulnerability'];
            if (isCritical) {
              labels.push('critical', 'urgent', 'P0');
            } else if (isHigh) {
              labels.push('high', 'P1');
            } else {
              labels.push('medium', 'P2');
            }

            await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: labels
              });

      - name: üìä Security scan summary
        if: always()
        run: |
          echo "## üîí R√âSUM√â COMPLET DU SCAN DE S√âCURIT√â"
          echo "=================================="
          echo ""
          echo "### üìã Informations G√©n√©rales"
          echo "- **Branche**: ${{ github.ref_name }}"
          echo "- **Commit**: ${{ github.sha }}"
          echo "- **D√©clencheur**: ${{ github.event_name }}"
          echo "- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "### üîç R√©sultats des Analyses"
          echo "#### Security Deep Scan"
          echo "- Vuln√©rabilit√©s critiques: ${{ needs.security-deep-scan.outputs.critical-vulnerabilities || 'N/A' }}"
          echo "- Secrets d√©tect√©s: ${{ needs.security-deep-scan.outputs.secrets-found || 'N/A' }}"
          echo "- Statut: ${{ needs.security-deep-scan.result }}"
          echo ""
          echo "#### Dependency Check"
          echo "- Vuln√©rabilit√©s critiques: ${{ needs.dependency-check.outputs.critical-vuln-count || 'N/A' }}"
          echo "- Vuln√©rabilit√©s √©lev√©es: ${{ needs.dependency-check.outputs.high-vuln-count || 'N/A' }}"
          echo "- Total vuln√©rabilit√©s: ${{ needs.dependency-check.outputs.dependency-vulnerabilities || 'N/A' }}"
          echo "- Statut: ${{ needs.dependency-check.result }}"
          echo ""
          echo "### üéØ Actions Prises"
          if [[ "${{ needs.security-deep-scan.outputs.critical-vulnerabilities || 0 }}" -gt 0 ]] || [[ "${{ needs.dependency-check.outputs.critical-vuln-count || 0 }}" -gt 0 ]] || [[ "${{ needs.security-deep-scan.outputs.secrets-found || 0 }}" -gt 0 ]]; then
            echo "- ‚úÖ Issue de s√©curit√© critique cr√©√©e"
            echo "- üö® Notification d'urgence envoy√©e"
            echo "- ‚ö†Ô∏è D√©ploiement bloqu√© jusqu'√† r√©solution"
          else
            echo "- ‚úÖ Aucune vuln√©rabilit√© critique d√©tect√©e"
            echo "- üü¢ S√©curit√© valid√©e pour le d√©ploiement"
          fi
          echo ""
          echo "### üìä M√©triques de Performance"
          echo "- Dur√©e Security Deep Scan: ~${{ needs.security-deep-scan.outputs.scan-duration || 'N/A' }}"
          echo "- Dur√©e Dependency Check: ~${{ needs.dependency-check.outputs.scan-duration || 'N/A' }}"
          echo ""
          echo "### üîó Liens Utiles"
          echo "- [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          echo "- [Commit Details](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
          echo "- [Security Reports](artifacts)"
          echo ""
          echo "=================================="
          echo "üîí Scan de s√©curit√© termin√© avec succ√®s"

  summary:
    name: üìã R√©sum√© S√©curit√©
    runs-on: ubuntu-latest
    needs: [security-deep-scan, dependency-check, security-notifications]
    if: always()
    steps:
      - name: üìã Generate security summary
        run: |
          echo "## üîí R√©sum√© Security Deep Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Statut: ${{ needs.security-deep-scan.outputs.security-status == 'success' && '‚úÖ S√âCURIS√â' || '‚ùå VULN√âRABILIT√âS' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä D√©tections:" >> $GITHUB_STEP_SUMMARY
          echo "- **Vuln√©rabilit√©s critiques**: ${{ needs.security-deep-scan.outputs.critical-vulnerabilities || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets d√©tect√©s**: ${{ needs.security-deep-scan.outputs.secrets-found || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Vuln√©rabilit√©s d√©pendances**: ${{ needs.dependency-check.outputs.dependency-vulnerabilities || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Type de scan: ${{ github.event.inputs.scan_type || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "### üìÖ Ex√©cut√© le: $(date)" >> $GITHUB_STEP_SUMMARY
