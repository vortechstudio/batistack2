name: üîí Security Deep Scan

on:
  push:
    branches: [ develop, master, production ]
  pull_request:
    branches: [ master, production ]
    types: [ opened, synchronize, reopened ]
  schedule:
    - cron: '0 3 * * *' # Scan quotidien √† 3h
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type de scan de s√©curit√©'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - secrets-only
          - dependencies-only
          - vulnerabilities-only
      create_issue:
        description: 'Cr√©er une issue en cas de vuln√©rabilit√© critique'
        required: false
        default: 'true'
        type: boolean

env:
  PHP_VERSION: '8.3'

jobs:
  security-deep-scan:
    name: üîí Analyse de s√©curit√© approfondie
    runs-on: ubuntu-latest
    outputs:
      critical-vulnerabilities: ${{ steps.vulnerability-check.outputs.critical-count }}
      secrets-found: ${{ steps.secrets-scan.outputs.secrets-count }}
      security-status: ${{ steps.security-summary.outputs.status }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Historique complet pour l'analyse des secrets

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick

      - name: üì¶ Install dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: üìÅ Create security reports directory
        run: mkdir -p reports/security

      - name: üõ°Ô∏è Advanced secrets detection
        id: secrets-scan
        continue-on-error: true
        if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets-only' || github.event.inputs.scan_type == ''
        run: |
          echo "üîç Recherche avanc√©e de secrets..."
          
          # Scan avec TruffleHog (plus approfondi que module-ci.yml)
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest filesystem /pwd \
            --json --no-update > reports/security/trufflehog-detailed.json || true
          
          # Analyse personnalis√©e pour les patterns Laravel sp√©cifiques
          echo "üîç Recherche de patterns Laravel sensibles..."
          
          # Recherche de cl√©s API, tokens, mots de passe en dur
          grep -r -n -E "(api_key|secret_key|password|token|private_key)" \
            --include="*.php" --include="*.env*" --include="*.json" \
            app/ config/ database/ routes/ > reports/security/sensitive-patterns.txt || true
          
          # V√©rification des fichiers .env
          find . -name ".env*" -not -name ".env.example" -not -name ".env.github" \
            -exec echo "‚ö†Ô∏è Fichier .env d√©tect√©: {}" \; > reports/security/env-files.txt || true
          
          # Compter les secrets trouv√©s
          SECRETS_COUNT=$(wc -l < reports/security/sensitive-patterns.txt || echo "0")
          echo "secrets-count=$SECRETS_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è $SECRETS_COUNT patterns sensibles d√©tect√©s"
          else
            echo "‚úÖ Aucun pattern sensible d√©tect√©"
          fi

      - name: üîç Vulnerability assessment
        id: vulnerability-check
        continue-on-error: true
        if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'vulnerabilities-only' || github.event.inputs.scan_type == ''
        run: |
          echo "üîç √âvaluation des vuln√©rabilit√©s..."
          
          # Audit Composer avec d√©tails
          composer audit --format=json > reports/security/composer-audit.json || true
          
          # Analyse des permissions de fichiers sensibles
          echo "üîí V√©rification des permissions de fichiers..."
          find storage/ -type f -name "*.log" -exec ls -la {} \; > reports/security/file-permissions.txt || true
          find . -name "*.env*" -exec ls -la {} \; >> reports/security/file-permissions.txt || true
          
          # V√©rification de la configuration de s√©curit√© Laravel
          echo "üõ°Ô∏è V√©rification de la configuration de s√©curit√© Laravel..."
          php artisan config:show app.debug > reports/security/laravel-config.txt || echo "Debug mode check failed"
          
          # Compter les vuln√©rabilit√©s critiques
          CRITICAL_COUNT=$(jq '[.[] | select(.severity == "high" or .severity == "critical")] | length' reports/security/composer-audit.json 2>/dev/null || echo "0")
          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          
          echo "üîç Vuln√©rabilit√©s critiques trouv√©es: $CRITICAL_COUNT"

      - name: üîí Advanced SARIF security analysis
        continue-on-error: true
        if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'vulnerabilities-only' || github.event.inputs.scan_type == ''
        run: |
          echo "üîí Analyse SARIF avanc√©e..."
          
          # Installation de outils de s√©curit√© suppl√©mentaires
          composer require --dev vimeo/psalm || true
          
          # Analyse Psalm pour la s√©curit√©
          ./vendor/bin/psalm --output-format=json > reports/security/psalm-security.json || true
          
          # V√©rification des en-t√™tes de s√©curit√© dans les r√©ponses
          echo "üõ°Ô∏è V√©rification de la configuration de s√©curit√© web..."
          grep -r "X-Frame-Options\|Content-Security-Policy\|X-XSS-Protection" config/ > reports/security/security-headers.txt || true

      - name: üìä Security summary
        id: security-summary
        run: |
          echo "üìä G√©n√©ration du r√©sum√© de s√©curit√©..."
          
          CRITICAL_VULNS="${{ steps.vulnerability-check.outputs.critical-count || '0' }}"
          SECRETS_FOUND="${{ steps.secrets-scan.outputs.secrets-count || '0' }}"
          
          # D√©terminer le statut global
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$SECRETS_FOUND" -gt 0 ]; then
            SECURITY_STATUS="failed"
            echo "‚ùå Probl√®mes de s√©curit√© d√©tect√©s"
          else
            SECURITY_STATUS="success"
            echo "‚úÖ Aucun probl√®me de s√©curit√© critique d√©tect√©"
          fi
          
          echo "status=$SECURITY_STATUS" >> $GITHUB_OUTPUT
          
          # Cr√©er un rapport de s√©curit√© d√©taill√©
          cat > reports/security/security-summary.md << EOF
          # üîí Rapport de S√©curit√© - $(date)
          
          ## üéØ Statut Global: $([ "$SECURITY_STATUS" = "success" ] && echo "‚úÖ S√âCURIS√â" || echo "‚ùå VULN√âRABILIT√âS D√âTECT√âES")
          
          ## üìä R√©sum√© des Analyses
          - **Vuln√©rabilit√©s critiques**: $CRITICAL_VULNS
          - **Secrets d√©tect√©s**: $SECRETS_FOUND
          - **Branche analys√©e**: ${{ github.ref_name }}
          - **Type de scan**: ${{ github.event.inputs.scan_type || 'full' }}
          
          ## üîç D√©tails des Analyses
          ### üõ°Ô∏è D√©tection de Secrets
          - Scan TruffleHog approfondi avec historique complet
          - Recherche de patterns Laravel sp√©cifiques
          - V√©rification des fichiers .env
          
          ### üîç √âvaluation des Vuln√©rabilit√©s
          - Audit Composer avec classification par s√©v√©rit√©
          - V√©rification des permissions de fichiers
          - Analyse de la configuration Laravel
          
          ### üîí Analyse SARIF
          - Scan Psalm pour la s√©curit√© du code
          - V√©rification des en-t√™tes de s√©curit√© web
          EOF
          
          # Rapport des probl√®mes critiques d√©tect√©s (non-bloquant)
          if [ "$SECURITY_STATUS" = "failed" ]; then
            echo "üö´ Scan de s√©curit√© - Vuln√©rabilit√©s critiques d√©tect√©es (non-bloquant)"
            echo "‚ö†Ô∏è Le workflow continue pour g√©n√©rer les rapports complets"
          fi

      - name: üì§ Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-deep-scan-${{ github.sha }}
          path: reports/security/
          retention-days: 90 # Conserver plus longtemps pour la s√©curit√©

  dependency-check:
    name: üîç Analyse OWASP des d√©pendances
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies-only' || github.event.inputs.scan_type == ''
    outputs:
      dependency-vulnerabilities: ${{ steps.dependency-analysis.outputs.vuln-count }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üìÅ Create dependency reports directory
        run: mkdir -p reports/dependencies

      - name: üîç OWASP Dependency Check
        continue-on-error: true
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Batistack'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --out reports/dependencies/
            --suppression dependency-check-suppressions.xml

      - name: üìä Analyze dependency results
        id: dependency-analysis
        run: |
          echo "üìä Analyse des r√©sultats de d√©pendances..."
          
          # Compter les vuln√©rabilit√©s dans le rapport JSON
          if [ -f "reports/dependencies/dependency-check-report.json" ]; then
            VULN_COUNT=$(jq '[.dependencies[].vulnerabilities[]?] | length' reports/dependencies/dependency-check-report.json || echo "0")
          else
            VULN_COUNT=0
          fi
          
          echo "vuln-count=$VULN_COUNT" >> $GITHUB_OUTPUT
          echo "üîç Vuln√©rabilit√©s de d√©pendances trouv√©es: $VULN_COUNT"
          
          # Cr√©er un r√©sum√© des d√©pendances
          cat > reports/dependencies/dependency-summary.md << EOF
          # üîç Rapport d'Analyse des D√©pendances - $(date)
          
          ## üìä R√©sum√© OWASP Dependency Check
          - **Vuln√©rabilit√©s trouv√©es**: $VULN_COUNT
          - **Projet**: Batistack
          - **Branche**: ${{ github.ref_name }}
          
          ## üîó Rapports G√©n√©r√©s
          - Rapport HTML d√©taill√©
          - Rapport JSON pour int√©gration
          - Rapport XML pour outils tiers
          EOF

      - name: üì§ Upload dependency reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-${{ github.sha }}
          path: reports/dependencies/
          retention-days: 60

  security-notifications:
    name: üö® Notifications de S√©curit√©
    runs-on: ubuntu-latest
    needs: [security-deep-scan, dependency-check]
    if: always()
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üö® Create critical security issue
        if: (needs.security-deep-scan.outputs.critical-vulnerabilities > 0 || needs.dependency-check.outputs.dependency-vulnerabilities > 0) && (github.event.inputs.create_issue == 'true' || github.event.inputs.create_issue == '')
        uses: actions/github-script@v7
        with:
          script: |
            const criticalVulns = '${{ needs.security-deep-scan.outputs.critical-vulnerabilities }}';
            const dependencyVulns = '${{ needs.dependency-check.outputs.dependency-vulnerabilities }}';
            const secretsFound = '${{ needs.security-deep-scan.outputs.secrets-found }}';
            
            const title = `üö® ALERTE S√âCURIT√â CRITIQUE - ${new Date().toISOString().split('T')[0]}`;
            const body = `## üö® Vuln√©rabilit√©s Critiques D√©tect√©es
            
            Le scan de s√©curit√© approfondi a d√©tect√© des vuln√©rabilit√©s critiques sur la branche \`${{ github.ref_name }}\`.
            
            ### üìä R√©sum√© des Menaces
            - **üî¥ Vuln√©rabilit√©s critiques**: ${criticalVulns}
            - **üì¶ Vuln√©rabilit√©s de d√©pendances**: ${dependencyVulns}
            - **üîë Secrets d√©tect√©s**: ${secretsFound}
            
            ### üö® ACTIONS URGENTES REQUISES
            - [ ] **PRIORIT√â 1**: Corriger les vuln√©rabilit√©s critiques
            - [ ] **PRIORIT√â 2**: Mettre √† jour les d√©pendances vuln√©rables
            - [ ] **PRIORIT√â 3**: Supprimer/s√©curiser les secrets d√©tect√©s
            - [ ] **PRIORIT√â 4**: Relancer le scan apr√®s corrections
            
            ### üîó Ressources
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            - [Rapports de s√©curit√©](artifacts)
            
            ### ‚ö†Ô∏è ATTENTION
            **Cette issue contient des informations sensibles de s√©curit√©.**
            **Ne pas partager publiquement les d√©tails des vuln√©rabilit√©s.**
            
            ---
            *Issue cr√©√©e automatiquement par le Security Deep Scan*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'vulnerability', 'urgent']
            });

  summary:
    name: üìã R√©sum√© S√©curit√©
    runs-on: ubuntu-latest
    needs: [security-deep-scan, dependency-check, security-notifications]
    if: always()
    steps:
      - name: üìã Generate security summary
        run: |
          echo "## üîí R√©sum√© Security Deep Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Statut: ${{ needs.security-deep-scan.outputs.security-status == 'success' && '‚úÖ S√âCURIS√â' || '‚ùå VULN√âRABILIT√âS' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä D√©tections:" >> $GITHUB_STEP_SUMMARY
          echo "- **Vuln√©rabilit√©s critiques**: ${{ needs.security-deep-scan.outputs.critical-vulnerabilities || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secrets d√©tect√©s**: ${{ needs.security-deep-scan.outputs.secrets-found || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Vuln√©rabilit√©s d√©pendances**: ${{ needs.dependency-check.outputs.dependency-vulnerabilities || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Type de scan: ${{ github.event.inputs.scan_type || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "### üìÖ Ex√©cut√© le: $(date)" >> $GITHUB_STEP_SUMMARY
