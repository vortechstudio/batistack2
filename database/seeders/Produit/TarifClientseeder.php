<?php

namespace Database\Seeders\Produit;

use App\Enums\Produits\TauxTVA;
use App\Models\Produit\Produit;
use App\Models\Produit\Service;
use App\Models\Produit\TarifClient;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class TarifClientSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üí∞ Cr√©ation des tarifs clients...');

        // V√©rifier que les produits et services existent
        $produits = Produit::all();
        $services = Service::all();

        if ($produits->isEmpty() && $services->isEmpty()) {
            $this->command->warn('Aucun produit ou service trouv√©. Veuillez d\'abord ex√©cuter ProduitSeeder et ServiceSeeder.');
            return;
        }

        // Tarifs clients sp√©cifiques avec donn√©es fixes
        $tarifsSpecifiques = [
            // Tarifs pour produits
            [
                'prix_unitaire' => 18.50,
                'taux_tva' => TauxTVA::NORMAL->value,
                'produit_id' => $produits->where('reference', 'PRD-000001')->first()?->id ?? $produits->random()->id,
                'service_id' => null,
            ],
            [
                'prix_unitaire' => 12.90,
                'taux_tva' => TauxTVA::NORMAL->value,
                'produit_id' => $produits->where('reference', 'PRD-000002')->first()?->id ?? $produits->random()->id,
                'service_id' => null,
            ],
            [
                'prix_unitaire' => 65.00,
                'taux_tva' => TauxTVA::NORMAL->value,
                'produit_id' => $produits->where('reference', 'PRD-000003')->first()?->id ?? $produits->random()->id,
                'service_id' => null,
            ],
            [
                'prix_unitaire' => 189.00,
                'taux_tva' => TauxTVA::NORMAL->value,
                'produit_id' => $produits->where('reference', 'PRD-000004')->first()?->id ?? $produits->random()->id,
                'service_id' => null,
            ],
        ];

        // Ajouter des tarifs pour services si ils existent
        if (!$services->isEmpty()) {
            $tarifsSpecifiques = array_merge($tarifsSpecifiques, [
                [
                    'prix_unitaire' => 450.00,
                    'taux_tva' => TauxTVA::REDUIT_5_5->value, // TVA r√©duite pour r√©novation
                    'produit_id' => null,
                    'service_id' => $services->where('reference', 'SRV-000001')->first()?->id ?? $services->random()->id,
                ],
                [
                    'prix_unitaire' => 35.00,
                    'taux_tva' => TauxTVA::INTERMEDIAIRE->value, // TVA interm√©diaire pour am√©lioration
                    'produit_id' => null,
                    'service_id' => $services->where('reference', 'SRV-000002')->first()?->id ?? $services->random()->id,
                ],
                [
                    'prix_unitaire' => 850.00,
                    'taux_tva' => TauxTVA::REDUIT_5_5->value,
                    'produit_id' => null,
                    'service_id' => $services->where('reference', 'SRV-000003')->first()?->id ?? $services->random()->id,
                ],
            ]);
        }

        foreach ($tarifsSpecifiques as $tarifData) {
            TarifClient::create($tarifData);
            $elementType = $tarifData['produit_id'] ? 'Produit' : 'Service';
            $elementId = $tarifData['produit_id'] ?? $tarifData['service_id'];
            $this->command->info("‚úÖ Tarif client cr√©√© : {$elementType} ID {$elementId} - {$tarifData['prix_unitaire']}‚Ç¨ HT");
        }

        // Cr√©er des tarifs pour chaque produit
        $totalTarifsGeneres = 0;

        if (!$produits->isEmpty()) {
            foreach ($produits as $produit) {
                // 80% des produits ont un tarif client
                if (rand(1, 100) <= 80) {
                    TarifClient::factory()
                        ->pourProduit($produit->id)
                        ->create();

                    $totalTarifsGeneres++;
                }
            }

            $this->command->info("üì¶ Tarifs g√©n√©r√©s pour les produits : " . $produits->count() * 0.8);
        }

        // Cr√©er des tarifs pour chaque service
        if (!$services->isEmpty()) {
            foreach ($services as $service) {
                // 90% des services ont un tarif client
                if (rand(1, 100) <= 90) {
                    TarifClient::factory()
                        ->pourService($service->id)
                        ->create();

                    $totalTarifsGeneres++;
                }
            }

            $this->command->info("üîß Tarifs g√©n√©r√©s pour les services : " . $services->count() * 0.9);
        }

        // Cr√©er des tarifs sp√©cialis√©s
        $tarifsSpecialises = [
            // Tarifs √©conomiques
            TarifClient::factory()->count(15)->economique()->create(),
            // Tarifs standard
            TarifClient::factory()->count(25)->standard()->create(),
            // Tarifs premium
            TarifClient::factory()->count(8)->premium()->create(),
            // Tarifs pour mat√©riaux de construction
            TarifClient::factory()->count(20)->materiauConstruction()->create(),
            // Tarifs pour services de r√©novation (TVA r√©duite)
            TarifClient::factory()->count(12)->serviceRenovation()->create(),
            // Tarifs pour services d'am√©lioration (TVA interm√©diaire)
            TarifClient::factory()->count(10)->serviceAmelioration()->create(),
            // Tarifs avec TVA normale
            TarifClient::factory()->count(30)->tvaNormale()->create(),
            // Tarifs avec TVA r√©duite
            TarifClient::factory()->count(8)->tvaReduite()->create(),
            // Tarifs avec TVA interm√©diaire
            TarifClient::factory()->count(6)->tvaIntermediaire()->create(),
            // Tarifs exon√©r√©s de TVA
            TarifClient::factory()->count(3)->tvaZero()->create(),
        ];

        $totalSpecialises = array_sum(array_map('count', $tarifsSpecialises));
        $totalTarifsGeneres += $totalSpecialises;

        $this->command->info("üéØ {$totalSpecialises} tarifs sp√©cialis√©s cr√©√©s");

        // Statistiques finales
        $totalTarifs = TarifClient::count();
        $tarifsProduits = TarifClient::pourProduits()->count();
        $tarifsServices = TarifClient::pourServices()->count();
        $tarifsTVANormale = TarifClient::avecTauxTVA(TauxTVA::NORMAL->value)->count();
        $tarifsTVAReduite = TarifClient::avecTauxTVA(TauxTVA::REDUIT_5_5->value)->count();
        $tarifsTVAIntermediaire = TarifClient::avecTauxTVA(TauxTVA::INTERMEDIAIRE->value)->count();

        $this->command->info("üìä === STATISTIQUES TARIFS CLIENTS ===");
        $this->command->info("üí∞ Total tarifs cr√©√©s : {$totalTarifs}");
        $this->command->info("üì¶ Tarifs produits : {$tarifsProduits}");
        $this->command->info("üîß Tarifs services : {$tarifsServices}");
        $this->command->info("üìä TVA normale (20%) : {$tarifsTVANormale}");
        $this->command->info("üè† TVA r√©duite (5,5%) : {$tarifsTVAReduite}");
        $this->command->info("üî® TVA interm√©diaire (10%) : {$tarifsTVAIntermediaire}");
        $this->command->info("üîß Tarifs sp√©cifiques : " . count($tarifsSpecifiques));
        $this->command->info("üé≤ Tarifs g√©n√©r√©s al√©atoirement : {$totalTarifsGeneres}");
        $this->command->info("‚úÖ Seeding des tarifs clients termin√© avec succ√®s !");
    }
}
